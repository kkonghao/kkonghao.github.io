<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>X86段机制页机制详解</title>
    <url>/2019/11/06/X86%E6%AE%B5%E6%9C%BA%E5%88%B6%E9%A1%B5%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<center><font face="楷体" size="4">注：本文的主要内容来自对《深入分析linux内核源代码》的整理，linux内核版本为2.4.16</font></center>



<h4 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h4><p>MOVE REG，ADDR ; 它把地址为ADDR（假设为10000）的内存单元的内容复制到REG中在8086 的实模式下，把某一段寄存器(基地址)左移4 位，然后与地址ADDR 相加后被直接送到内存总线上，这个相加后的地址(20位)就是内存单元的物理地址，而程序中的这个地址ADDR就叫逻辑地址(或叫虚拟地址)。<font face="楷体" size="4">在80386 的段机制中，逻辑地址由两部分组成，即段部分（选择符）及偏移部分。</font><br><a id="more"></a></p>
<p>段是形成逻辑地址到线性地址转换的基础。如果我们把段看成一个对象的话，那么对它的描述如下。<br>• 段的基地址(Base Address):在线性地址空间中段的起始地址。<br>• 段的界限(Limit):表示在逻辑地址中，段内可以使用的最大偏移量。<br>• 段的属性(Attribute):表示段的特性。例如，该段是否可被读出或写入，或者该段是否作为一个程序来执行，以及段的特权级等。</p>
<h4 id="逻辑地址、线性地址和物理地址"><a href="#逻辑地址、线性地址和物理地址" class="headerlink" title="逻辑地址、线性地址和物理地址"></a>逻辑地址、线性地址和物理地址</h4><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106053402.png" alt="qq"></p>
<center><font face="楷体" size="4">图1 MMU把逻辑地址转换为物理地址过程</font></center>

<h4 id="用户段描述符-User-Descriptor"><a href="#用户段描述符-User-Descriptor" class="headerlink" title="用户段描述符(User Descriptor)"></a>用户段描述符(User Descriptor)</h4><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106060132.png" alt></p>
<center><font face="楷体" size="4">图2 存取权字节的一般格式</font></center>

<p>一个段描述符指出了段的32 位基地址和20 位段界限（即段大小）。第6 个字节的G 位是粒度位，当G=0 时，段长表示段格式的字节长度，即一个段最长可达1M  字节。当G=1 时，段长表示段的以4K 字节为一页的页的数目，即一个段最长可达1M×4K=4G 字节。D 位表示缺省操作数的大小，如果D=0，操作数为16 位，如果D=1，操作数为32 位。    </p>
<p>第7 位P 位（Present） 是存在位，表示段描述符描述的这个段是否在内存中，如果在内存中。P=1；如果不在内存中，P=0。</p>
<p>DPL（Descriptor Privilege Level），就是描述符特权级，它占两位，其值为0～3，用来确定这个段的特权级即保护等级。0为内核级别，3为用户级别。</p>
<p>S 位（System）表示这个段是系统段还是用户段。如果S=0，则为系统段，如果S=1，则为用户程序的代码段、数据段或堆栈段。</p>
<p>类型占3 位，第3 位为E 位，表示段是否可执行。当E=0 时，为数据段描述符，这时的第2 位ED 表示地址增长方向。第1  位（W）是可写位。当段为代码段时，第3 位E=1，这时第2 位为一致位（C）。当C=1 时，如果当前特权级低于描述符特权级，并且当前特权级保持不变，那么代码段只能执行。所谓当前特权级CPL（Current  Privilege Level），就是当前正在执行的任务的特权级。第1 位为可读位R。</p>
<p>存取权字节的第0 位A 位是访问位，用于请求分段不分页的系统中，每当该段被访问时，将A 置1。对于分页系统，则A 被忽略未用。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062438.png" alt></p>
<center><font face="楷体" size="4">图3 数据段的存取字节</font></center>


<p><img src="/images/2019/11/06/bc583af0-001a-11ea-8860-b9b91b2a10f8.png" alt="image.png"></p>
<center><font face="楷体" size="4">图4 代码段的存取字节</font></center>

<h4 id="系统段描述符-Sys-Descriptor"><a href="#系统段描述符-Sys-Descriptor" class="headerlink" title="系统段描述符(Sys Descriptor)"></a>系统段描述符(Sys Descriptor)</h4><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062329.png" alt></p>
<center><font face="楷体" size="4">图5 系统段描述符一般格式</font></center>

<p>系统段描述符的第5 个字节的第4 位为0，说明它是系统段描述符，类型占4 位，没有A 位。第6 个字节的第6 位为0，说明系统段的长度是字节粒度，所以，一个系统段的最大长度为1M字节。</p>
<p>系统段的类型为16 种，如图2.15 所示。在这16 种类型中，保留类型和有关286 的类型不予考虑。门也是一种描述符,有调用门、任务门、中断门和陷阱门4  种门描述符。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062556.png" alt></p>
<center><font face="楷体" size="4">图6 系统段的类型</font></center>

<h4 id="选择符、描述符表和描述符表寄存器"><a href="#选择符、描述符表和描述符表寄存器" class="headerlink" title="选择符、描述符表和描述符表寄存器"></a>选择符、描述符表和描述符表寄存器</h4><p>描述符表（即段表）定义了386 系统的所有段的情况。所有的描述符表本身都占据一个字节为8 的倍数的存储器空间，空间大小在8 个字节（至少含一个描述符）到64K 字节（至多含8K=8192）个描述符之间。</p>
<p>1.全局描述符表（GDT）<br>全局描述符表GDT（Global Descriptor Table），除了任务门，中断门和陷阱门描述符外，包含着系统中所有任务都共用的那些段的描述符。它的第一个8 字节位置没有使用。</p>
<p>2.中断描述符表（IDT）<br>中断描述符表IDT（Interrupt Descriptor Table），包含256 个门描述符。IDT 中只能包含任务门、中断门和陷阱门描述符，虽然IDT 表最长也可以为64K 字节，但只能存取2K字节以内的描述符，即256  个描述符，这个数字是为了和8086 保持兼容。</p>
<p>3.局部描述符表（LDT）</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062802.png" alt></p>
<center><font face="楷体" size="4">图7 选择符表结构</font></center>

<p>局部描述符表LDT（Local Descriptor Table），包含了与一个给定任务有关的描述符，每个任务各自有一个的LDT。有了LDT，就可以使给定任务的代码、数据与别的任务相隔离。每一个任务的局部描述符表LDT  本身也用一个描述符来表示，称为LDT 描述符，它包含了有关局部描述符表的信息，被放在全局描述符表GDT 中，使用LDTR进行索引。</p>
<p>在实模式下，段寄存器存储的是真实的段基址，在保护模式下，16 位的段寄存器无法放下32 位的段基址，因此，它们被称为选择符，即段寄存器的作用是用来选择描述符。选择符的结构如图2.16  所示。</p>
<p>可以看出，选择符有3 个域：第15~3 位这13 位是索引域，表示的数据为0~8129，用于指向全局描述符表中相应的描述符。第2 位为选择域，如果TI=1，就从局部描述符表中选择相应的描述符，如果TI=0，就从全局描述符表中选择描述符。第1、0  位是特权级，表示选择符的特权级，被称为请求者特权级RPL（Requestor Privilege Level）。只有请求者特权级RPL  高于（数字低于）或等于相应的描述符特权级DPL，描述符才能被存取，这就可以实现一定程度的保护。</p>
<p>下面讲一下在没有分页操作时，寻址一个存储器操作数的步骤。<br>(1)在段选择符中装入16 位数，同时给出32 位地址偏移量（比如在ESI、EDI 中等）。<br>(2)先根据相应描述符表寄存器中的段地址（确定描述符表的地址）和段界限（确定描述符表的大小），根据段选择符的TI决定从哪种描述符表中取，再根据段选择符的索引找到相应段描述符的位置，比较RPL与DPL，若该段无问题，就取出相应的段描述符放入段描述符高速缓冲寄存器中。<br>(3)将段描述符中的32 位段基地址和放在ESI、EDI 等中的32 位有效地址相加，就形成了32 位物理地址。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062851.png" alt></p>
<center><font face="楷体" size="4">图8 寻址过程</font></center>

<h4 id="linux中的段机制"><a href="#linux中的段机制" class="headerlink" title="linux中的段机制"></a>linux中的段机制</h4><p>从2.2 版开始，Linux 让所有的进程（或叫任务）都使用相同的逻辑地址空间，因此就没有必要使用局部描述符表LDT。</p>
<p>Linux 在启动的过程中设置了段寄存器的值和全局描述符表GDT 的内容，段寄存器的定义在include/asm-i386/segment.h 中：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KERNEL_CS 0x10 <span class="comment">//内核代码段，index=2,TI=0,RPL=0 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KERNEL_DS 0x18 <span class="comment">//内核数据段, index=3,TI=0,RPL=0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __USER_CS   0x23 <span class="comment">//用户代码段, index=4,TI=0,RPL=3</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __USER_DS   0x2B <span class="comment">//用户数据段, index=5,TI=0,RPL=3</span></span></span><br></pre></td></tr></table></figure></p>
<p>从定义看出，没有定义堆栈段，实际上，Linux 内核不区分数据段和堆栈段，这也体现了Linux 内核尽量减少段的使用。因为没有使用LDT，因此，TI=0，并把这4 个段描述符都放在GDT中,  index 就是某个段描述符在GDT 表中的下标。内核代码段和数据段具有最高特权，因此其RPL为0，而用户代码段和数据段具有最低特权，因此其RPL 为3。</p>
<p>全局描述符表的定义在arch/i386/kernel/head.S 中：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ENTRY（gdt_table）</span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* NULL descriptor */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br><span class="line">.quad <span class="number">0x00cf9a000000ffff</span> <span class="comment">/* 0x10 kernel 4GB code at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cf92000000ffff</span> <span class="comment">/* 0x18 kernel 4GB data at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cffa000000ffff</span> <span class="comment">/* 0x23 user 4GB code at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cff2000000ffff</span> <span class="comment">/* 0x2b user 4GB data at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br></pre></td></tr></table></figure>
<p>从代码可以看出，GDT 放在数组变量gdt_table 中。按Intel 规定，GDT 中的第一项为空，这是为了防止加电后段寄存器未经初始化就进入保护模式而使用GDT 的。第二项也没用。从下标2～5  共4 项对应于前面的4 种段描述符值。对照图2.10，从描述符的数值可以得出：</p>
<p>• 段的基地址全部为0x00000000；<br>• 段的上限全部为0xffff；<br>• 段的粒度G 为1，即段长单位为4KB；<br>• 段的D 位为1，即对这4 个段的访问都为32 位指令；<br>• 段的P 位为1，即4 个段都在内存。</p>
<p>由此可以得出，每个段的逻辑地址空间范围为0～4GB。每个段的基地址为0，因此，逻辑地址到线性地址映射保持不变，也就是说，偏移量就是线性地址，我们以后所提到的逻辑地址（或虚拟地址）和线性地址指的也就是同一地址。看来，Linux  巧妙地把段机制给绕过去了，它只把段分为两种：用户态（RPL＝3）的段和内核态（RPL=0）的段，而完全利用了分页机制。</p>
<p>按Intel 的规定，每个进程有一个任务状态段（TSS）和局部描述符表LDT，但Linux 也没有完全遵循Intel 的设计思路。如前所述，Linux 的进程没有使用LDT，而对TSS 的使用也非常有限，每个CPU  仅使用一个TSS。TSS 有它自己 8 字节的任务段描述符（Task State Segment Descriptor ，简称TSSD）。这个描述符包括指向TSS 起始地址的32 位基地址域，20 位界限域，界限域值不能小于十进制104（由TSS  段的最小长度决定）。TSS 描述符存放在GDT 中，它是GDT 中的一个表项，由中断描述符表（IDT）中的任务门（存放TSS段的选择符）装入TR来进行索引。</p>
<h4 id="页目录项、页表项、页面项"><a href="#页目录项、页表项、页面项" class="headerlink" title="页目录项、页表项、页面项"></a>页目录项、页表项、页面项</h4><p>80386 使用4K 字节大小的页。每一页都有4K 字节长，并在4K 字节的边界上对齐，即每一页的起始地址都能被4K 整除。因此，80386 把4G 字节的线性地址空间，划分为1G 个页面，每页有4K  字节大小。分页机制通过把线性地址空间中的页，重新定位到物理地址空间来进行管理，因为每个页面的整个4K 字节作为一个单位进行映射，并且每个页面都对齐4K 字节的边界，因此，线性地址的低12 位经过分页机制直接地作为物理地址的低12 位使用。</p>
<p>页目录表，存储在一个4K 字节的页面中，最多可包含1024  个页目录项，每个页目录项为4 个字节，结构如图9所示。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063019.png" alt></p>
<center><font face="楷体" size="4">图9 页目录中的页目录项</font></center>


<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063116.png" alt></p>
<center><font face="楷体" size="4">图10 由U/S和R/W提供的保护</font></center>

<p>• 第31~12位是20位页表地址，由于页表地址的低12位总为0，所以用高20 位指出32位页表地址就可以了。<br>• 第0位是存在位，如果P=1，表示页表地址指向的该页在内存中，如果P=0，表示不在内存中。<br>• 第1位是读/写位，第2 位是用户/管理员位，这两位为页目录项提供硬件保护。当特权级为3  的进程要想访问页面时，需要通过页保护检查，而特权级为0 的进程就可以绕过页保护，如图2.23 所示。</p>
<p>• 第3位是PWT（Page Write-Through）位，表示是否采用写透方式，写透方式就是既写内存（RAM）也写高速缓存,该位为1  表示采用写透方式。<br>• 第4位是PCD（Page Cache Disable）位，表示是否启用高速缓存，该位为1 表示启用高速缓存。<br>• 第5位是访问位，当对页目录项进行访问时，A位=1。<br>• 第7位是Page Size 标志，只适用于页目录项。如果置为1，页目录项指的是4MB 的页面，即扩展分页。</p>
<p>80386的每个页目录项指向一个页表，存储在一个4K字节的页面中，页表最多含有1024个页面项，每项4  个字节，包含页面的起始地址和有关该页面的信息。页面的起始地址也是4K的整数倍，所以页面的低12位也留作它用，如图2.24所示。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063246.png" alt></p>
<center><font face="楷体" size="4">图11 页表中的页面项</font></center>

<p>第31～12位是20位物理页面地址，除第6位外第0～5位及9～11位的用途和页目录项一样，第6位是页面项独有的，当对涉及的页面进行写操作时，D位被置1。</p>
<p>4GB的存储器只有一个页目录，它最多有1024个页目录项，每个页目录项又含有1024个页面项，因此，存储器一共可以分成1024×1024=1M个页面。由于每个页面为4K个字节，所以，存储器的大小正好最多为4GB。</p>
<p>当访问一个操作单元时，如何由分段结构确定的32位线性地址通过分页操作转化成32位物理地址呢？</p>
<p>第一步，CR3包含着页目录的起始地址，用32位线性地址的最高10位A31~A22作为页目录表的页目录项的索引，将它乘以4，与CR3 中的页目录表的起始地址相加，形成相应页目录项的地址。</p>
<p>第二步，从指定的地址中取出32位页目录项，它的低12位为0，这32位是页表的起始地址。用32位线性地址中的A21~A12位作为页表中的页表项的索引，将它乘以4，与页表的起始地址相加，形成相应页表项的地址。</p>
<p>第三步，从指定地址中取出32位页表项，它的低12位为0，这32位是页面地址，将A11~A0作为相对于页面地址的偏移量，与32位页面地址相加，形成32位物理地址。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106070415.png" alt></p>
<center><font face="楷体" size="4">图12 两级页表结构</font></center>

<h4 id="linux-中的分页机制"><a href="#linux-中的分页机制" class="headerlink" title="linux 中的分页机制"></a>linux 中的分页机制</h4><p>Linux 的分段机制使得所有的进程都使用相同的段寄存器值，这就使得内存管理变得简单，也就是说，所有的进程都使用同样的线性地址空间（0～4GB）。Linux  采用三级分页模式而不是两级。如图2.28 所示为三级分页模式，为此，Linux定义了3 种类型的表。</p>
<p>• 总目录PGD（Page Global Directory）<br>• 中间目录PMD（Page Middle Derectory）<br>• 页表PT（Page Table）</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063456.png" alt></p>
<center><font face="楷体" size="4">图13 Linux三级分页</font></center>]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>程序内存区域分配的五个段</title>
    <url>/2019/11/04/%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%86%E9%85%8D%E7%9A%84%E4%BA%94%E4%B8%AA%E6%AE%B5/</url>
    <content><![CDATA[<h4 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h4><p>在学习之前我们先看看ELF文件。</p>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106075719.png" alt></p>
<center><font face="楷体" size="4">图1 ELF文件格式图</font></center>

<h4 id="ELF分为三种类型"><a href="#ELF分为三种类型" class="headerlink" title="ELF分为三种类型"></a>ELF分为三种类型</h4><p>.o可重定位文件(relocalble file)，可执行文件以及共享库(shared library)，三种格式基本上从结构上是一样的，只是具体到每一个结构不同。下面我们就从整体上看看这3种格式从文件内容上存储的方式，spec上有张图是比较经典的：如上图：其实从文件存储的格式来说，上面的两种view实际上是一样的，Segment实际上就是由section组成的，将相应的一些section映射到一起就叫segment了,就是说segment是由0个或多个section组成的，实际上本质都是section。在这里我们首先来仔细了解一下section和segment的概念：</p>
<p>section就是相同或者相似信息的集合，比如我们比较熟悉的.text.data.bss section，.text是可执行指令的集合，.data是初始化后数据的集合，.bss是未初始化数据的集合。实际上我们也可以将一个程序的所有内容都放在一起，就像dos一样，但是将可执行程序分成多个section是很有好处的，比如说我们可以将.text section放在memory的只读空间内，将可变的.data section放在memory的可写空间内。</p>
<p>从可执行文件的角度来讲，如果一个数据未被初始化那就不需要为其分配空间，所以.data和.bss一个重要的区别就是.bss并不占用可执行文件的大小，它只是记载需要多少空间来存储这些未初始化数据，而不分配实际的空间。</p>
<p>可以通过命令 $ readelf -l a.out 查看文件的格式和组成。</p>
<h4 id="不同视角下的程序"><a href="#不同视角下的程序" class="headerlink" title="不同视角下的程序"></a>不同视角下的程序</h4><p>站在汇编语言的角度，一个程序分为：<br>数据段 — DS<br>堆栈段 — SS<br>代码段 — CS<br>扩展段 – ES</p>
<p>站在高级语言的角度，根据APUE，一个程序分为如下段：<br>text – 代码段<br>data (initialized) – 初始化数据段<br>bss – 未初始化数据段<br>stack – 栈区<br>heap – 堆区</p>
<p>1.一般情况下，一个可执行二进制程序(更确切的说，在Linux操作系统下为一个进程单元，在UC/OSII中被称为任务)在存储(没有调入到内存运行)时拥有3个部分，分别是代码段(text)、数据段(data)和BSS段。这3个部分一起组成了该可执行程序的文件。</p>
<center><font face="楷体" size="4">可执行二进制程序 = 代码段(text)＋数据段(data)+BSS段</font></center>



<p>2.而当程序被加载到内存单元时，则需要另外两个域：堆域和栈域。图1-1所示为可执行代码存储态和运行态的结构对照图。一个正在运行的C程序占用的内存区域分为代码段、初始化数据段、未初始化数据段(BSS)、堆、栈5个部分。</p>
<center><font face="楷体" size="4">正在运行的C程序 = 代码段+初始化数据段(data)+未初始化数据段(BSS)+堆+栈</font></center>


<p>3.在将应用程序加载到内存空间执行时，操作系统负责代码段、数据段和BSS段的加载，并将在内存中为这些段分配空间。栈亦由操作系统分配和管理，而不需要程序员显示地管理；堆段由程序员自己管理，即显示地申请和释放空间。</p>
<p>4.动态分配与静态分配，二者最大的区别在于:</p>
<font face="楷体" size="4" color="blue">
1.直到Run-Time的时候，执行动态分配，而在compile-time的时候，就已经决定好了分配多少Text+Data+BSS+Stack。
</font>
<font face="楷体" size="4" color="red">
2.通过malloc()动态分配的内存，需要程序员手工调用free()释放内存，否则容易导致内存泄露，而静态分配的内存则在进程执行结束后系统释放(Text, Data), 但Stack段中的数据很短暂，函数退出立即被销毁。</font>

<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106081413.png" alt></p>
<center><font face="楷体" size="4">图2 执行文件与地址空间</font></center>

<p>图2 从可执行文件a.out的角度来讲，如果一个数据未被初始化那就不需要为其分配空间，所以.data和.bss一个重要的区别就是.bss并不占用可执行文件的大小，它只是记载需要多少空间来存储这些未初始化数据，而不分配实际的空间。</p>
<h4 id="不同数据段的详解"><a href="#不同数据段的详解" class="headerlink" title="不同数据段的详解"></a>不同数据段的详解</h4><p>代码段 —text（code segment/text segment）<br>text段在内存中被映射为<strong>只读</strong>，但.data和.bss是<strong>可写</strong>的。<br>text段是程序代码段，在AT91库中是表示程序段的大小，它是由编译器在编译连接时自动计算的，当你在链接定位文件中将该符号放置在代码段后，那么该符号表示的值就是代码段大小，编译连接时，该符号所代表的值会自动代入到源程序中。</p>
<p>数据段 — data<br>data包含静态初始化的数据，所以有初值的全局变量和static变量在data区。段的起始位置也是由连接定位文件所确定，大小在编译连接时自动分配，它和你的程序大小没有关系，但和程序使用到的全局变量，常量数量相关。数据段属于静态内存分配。 </p>
<p>bss段—bss<br>bss是英文Block Started by Symbol的简称，通常是指用来存放程序中未初始化的全局变量的一块内存区域，在程序载入时由内核清0。BSS段属于静态内存分配。它的初始值也是由用户自己定义的连接定位文件所确定，用户应该将它定义在可读写的RAM区内，源程序中使用malloc分配的内存就是这一块，它不是根据data大小确定，主要由程序中同时分配内存最大值所确定，不过如果超出了范围，也就是分配失败，可以等空间释放之后再分配。BSS段属于静态内存分配。</p>
<p>stack：<br>栈(stack)保存函数的局部变量（但不包括static声明的变量， static 意味着 在数据段中 存放变量），参数以及返回值。是一种“后进先出”（Last In First Out，LIFO）的数据结构，这意味着最后放到栈上的数据，将会是第一个从栈上移走的数据。对于哪些暂时存贮的信息，和不需要长时间保存的信息来说，LIFO这种数据结构非常理想。在调用函数或过程后，系统通常会清除栈上保存的局部变量、函数调用信息及其它的信息。栈另外一个重要的特征是，它的地址空间“向下减少”，即当栈上保存的数据越多，栈的地址就越低。栈（stack）的顶部在可读写的RAM区的最后。</p>
<p>heap:<br>堆(heap)保存函数内部动态分配内存，是另外一种用来保存程序信息的数据结构，更准确的说是保存程序的动态变量。堆是“先进先出”（First In first Out，FIFO）数据结构。它只允许在堆的一端插入数据，在另一端移走数据。堆的地址空间“向上增加”，即当堆上保存的数据越多，堆的地址就越高。</p>
<center><font face="楷体" size="4">表1 五段总结</font></center>

<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>代码段</td>
<td>可执行代码，字符串常量</td>
</tr>
<tr>
<td>数据段</td>
<td>已初始化全局变量，已初始化、局部静态变量、常量数据</td>
</tr>
<tr>
<td>BSS段</td>
<td>未初始化全局变量，未初始化全局静态变量</td>
</tr>
<tr>
<td>栈段</td>
<td>局部变量、函数参数</td>
</tr>
<tr>
<td>堆段</td>
<td>动态内存分配</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106082822.png" alt></p>
<center><font face="楷体" size="4">图3 APUE中的一个典型C内存空间分布图</font></center>

<p>所以可以知道：传入的参数,局部变量,都是在栈顶分布,随着子函数的增多而向下增长.<br>函数的调用地址(函数运行代码),全局变量,静态变量都是在分配内存的低部存在,而malloc分配的堆则存在于这些内存之上,并向上生长.</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g_A = <span class="number">10</span>;  <span class="comment">//代码段</span></span><br><span class="line"><span class="keyword">int</span> g_B = <span class="number">20</span>;        <span class="comment">//数据段</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_C = <span class="number">30</span>; <span class="comment">//数据段</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_D;      <span class="comment">//BSS段</span></span><br><span class="line"><span class="keyword">int</span> g_E;             <span class="comment">//BSS段</span></span><br><span class="line"><span class="keyword">char</span> *p1;            <span class="comment">//BSS段</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> local_A;            <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">int</span> local_B;            <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_C = <span class="number">0</span>; <span class="comment">//数据段</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_D;     <span class="comment">//数据段</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>; <span class="comment">//123456在代码段，p3在栈上</span></span><br><span class="line"></span><br><span class="line">    p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">//堆，分配得来得10字节的区域在堆区</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123456"</span>); <span class="comment">//123456&#123;post.content&#125;放在常量区，编译器可能会将它与p3所指向 的"123456"优化成一块</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hight address\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------栈--------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈, 局部变量, local_A, addr:0x%08x\n"</span>, &amp;local_A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈, 局部变量,(后进栈地址相对local_A低)  local_B, addr:0x%08x\n"</span>, &amp;local_B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------堆--------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"堆, malloc分配内存,  p1,  addr:0x%08x\n"</span>, p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"------------BSS段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 全局变量,       未初始化    g_E,     addr:0x%08x\n"</span>, &amp;g_E, g_E);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态全局变量,   未初始化,   g_D,     addr:0x%08x\n"</span>, &amp;g_D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态局部变量,   初始化,     local_C, addr:0x%08x\n"</span>, &amp;local_C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态局部变量,   未初始化,   local_D, addr:0x%08x\n"</span>, &amp;local_D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------数据段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"数据段,全局变量,       初始化      g_B,     addr:0x%08x\n"</span>, &amp;g_B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"数据段,静态全局变量,   初始化,     g_C,     addr:0x%08x\n"</span>, &amp;g_C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------代码段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"代码段,全局初始化变量, 只读const,  g_A,     addr:0x%08x\n\n"</span>, &amp;g_A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"low address\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hight address</span><br><span class="line"></span><br><span class="line">-------------栈--------------</span><br><span class="line">栈,    局部变量,                             local_A, addr:<span class="number">0xffa70c1c</span></span><br><span class="line">栈,    局部变量,(后进栈地址相对local_A低)     local_B, addr:<span class="number">0xffa70c18</span></span><br><span class="line">-------------堆--------------</span><br><span class="line">堆,    <span class="built_in">malloc</span>分配内存,             p1,      addr:<span class="number">0x087fe008</span></span><br><span class="line">------------BSS段------------</span><br><span class="line">BSS段, 全局变量,       未初始化    g_E,     addr:<span class="number">0x08049a64</span></span><br><span class="line">BSS段, 静态全局变量,   未初始化,   g_D,     addr:<span class="number">0x08049a5c</span></span><br><span class="line">BSS段, 静态局部变量,   初始化,     local_C, addr:<span class="number">0x08049a58</span></span><br><span class="line">BSS段, 静态局部变量,   未初始化,   local_D, addr:<span class="number">0x08049a54</span></span><br><span class="line">-----------数据段------------</span><br><span class="line">数据段,全局变量,       初始化      g_B,     addr:<span class="number">0x08049a44</span></span><br><span class="line">数据段,静态全局变量,   初始化,     g_C,     addr:<span class="number">0x08049a48</span></span><br><span class="line">-----------代码段------------</span><br><span class="line">代码段,全局初始化变量, 只读<span class="keyword">const</span>,  g_A,     addr:<span class="number">0x08048620</span></span><br><span class="line"></span><br><span class="line">low address</span><br></pre></td></tr></table></figure></p>
<p><strong>++注意：++</strong><br>编译时需要-g选项，这样才可以看elf信息；<br>readelf -a a.out<br>查看这个执行文件的elf信息，摘录部分如下：重点注意其中data段，text段还要有bss段的地址，然后比较这个地址和上面的运行结果，是否是在elf文件的各个段的地址之内。<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ <span class="number">0</span>]                   <span class="literal">NULL</span>            <span class="number">00000000</span> <span class="number">000000</span> <span class="number">000000</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">  [ <span class="number">1</span>] .interp           PROGBITS        <span class="number">08048114</span> <span class="number">000114</span> <span class="number">000013</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [ <span class="number">2</span>] .note.ABI-tag     NOTE            <span class="number">08048128</span> <span class="number">000128</span> <span class="number">000020</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">3</span>] .gnu.hash         GNU_HASH        <span class="number">08048148</span> <span class="number">000148</span> <span class="number">000020</span> <span class="number">04</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">4</span>] .dynsym           DYNSYM          <span class="number">08048168</span> <span class="number">000168</span> <span class="number">000070</span> <span class="number">10</span>   A  <span class="number">5</span>   <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">5</span>] .dynstr           STRTAB          <span class="number">080481</span>d8 <span class="number">0001</span>d8 <span class="number">000058</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [ <span class="number">6</span>] .gnu.version      VERSYM          <span class="number">08048230</span> <span class="number">000230</span> <span class="number">00000</span>e <span class="number">02</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">2</span></span><br><span class="line">  [ <span class="number">7</span>] .gnu.version_r    VERNEED         <span class="number">08048240</span> <span class="number">000240</span> <span class="number">000020</span> <span class="number">00</span>   A  <span class="number">5</span>   <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">8</span>] .rel.dyn          REL             <span class="number">08048260</span> <span class="number">000260</span> <span class="number">000008</span> <span class="number">08</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">9</span>] .rel.plt          REL             <span class="number">08048268</span> <span class="number">000268</span> <span class="number">000028</span> <span class="number">08</span>   A  <span class="number">4</span>  <span class="number">11</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">10</span>] .init             PROGBITS        <span class="number">08048290</span> <span class="number">000290</span> <span class="number">000017</span> <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">11</span>] .plt              PROGBITS        <span class="number">080482</span>a8 <span class="number">0002</span>a8 <span class="number">000060</span> <span class="number">04</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">12</span>] .text             PROGBITS        <span class="number">08048310</span> <span class="number">000310</span> <span class="number">0002e8</span> <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span> <span class="number">16</span></span><br><span class="line">  [<span class="number">13</span>] .fini             PROGBITS        <span class="number">080485f</span>8 <span class="number">0005f</span>8 <span class="number">00001</span>c <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">14</span>] .rodata           PROGBITS        <span class="number">08048614</span> <span class="number">000614</span> <span class="number">000326</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">15</span>] .eh_frame         PROGBITS        <span class="number">0804893</span>c <span class="number">00093</span>c <span class="number">000004</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">16</span>] .ctors            PROGBITS        <span class="number">08049940</span> <span class="number">000940</span> <span class="number">000008</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">17</span>] .dtors            PROGBITS        <span class="number">08049948</span> <span class="number">000948</span> <span class="number">000008</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">18</span>] .jcr              PROGBITS        <span class="number">08049950</span> <span class="number">000950</span> <span class="number">000004</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">19</span>] .dynamic          DYNAMIC         <span class="number">08049954</span> <span class="number">000954</span> <span class="number">0000</span>c8 <span class="number">08</span>  WA  <span class="number">5</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">20</span>] .got              PROGBITS        <span class="number">08049</span>a1c <span class="number">000</span>a1c <span class="number">000004</span> <span class="number">04</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">21</span>] .got.plt          PROGBITS        <span class="number">08049</span>a20 <span class="number">000</span>a20 <span class="number">000020</span> <span class="number">04</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">22</span>] .data             PROGBITS        <span class="number">08049</span>a40 <span class="number">000</span>a40 <span class="number">00000</span>c <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">23</span>] .bss              NOBITS          <span class="number">08049</span>a4c <span class="number">000</span>a4c <span class="number">00001</span>c <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">24</span>] .comment          PROGBITS        <span class="number">00000000</span> <span class="number">000</span>a4c <span class="number">000114</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">25</span>] .debug_aranges    PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>60 <span class="number">000020</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">26</span>] .debug_pubnames   PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>80 <span class="number">00003</span>a <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">27</span>] .debug_info       PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>ba <span class="number">0001f</span>4 <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">28</span>] .debug_abbrev     PROGBITS        <span class="number">00000000</span> <span class="number">000</span>dae <span class="number">00006f</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">29</span>] .debug_line       PROGBITS        <span class="number">00000000</span> <span class="number">000e1</span>d <span class="number">000058</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">30</span>] .debug_frame      PROGBITS        <span class="number">00000000</span> <span class="number">000e78</span> <span class="number">00003</span>c <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">31</span>] .debug_str        PROGBITS        <span class="number">00000000</span> <span class="number">000</span>eb4 <span class="number">00000</span>d <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">32</span>] .debug_loc        PROGBITS        <span class="number">00000000</span> <span class="number">000</span>ec1 <span class="number">000043</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">33</span>] .shstrtab         STRTAB          <span class="number">00000000</span> <span class="number">000f</span>04 <span class="number">000143</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">34</span>] .symtab           SYMTAB          <span class="number">00000000</span> <span class="number">0015e8</span> <span class="number">000560</span> <span class="number">10</span>     <span class="number">35</span>  <span class="number">60</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">35</span>] .strtab           STRTAB          <span class="number">00000000</span> <span class="number">001b</span>48 <span class="number">0002</span>ad <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure></p>
<p>★注意静态变量初始化为零和全局静态变量初始化为零的情况，都是存储在bss段★<br>从上面的elf文件可以看出，<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[<span class="number">23</span>] .bss  NOBITS    <span class="number">08049</span>a4c <span class="number">000</span>a4c <span class="number">00001</span>c <span class="number">00</span>    WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">[<span class="number">22</span>] .data PROGBITS   <span class="number">08049</span>a40000a40 <span class="number">00000</span>c <span class="number">00</span>     WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">[<span class="number">12</span>] .text PROGBITS   <span class="number">08048310000310</span> <span class="number">0002e8</span> <span class="number">00</span>     AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">16</span></span><br><span class="line">但是在结果中显示：BSS段, 静态局部变量,初始化,  local_C, addr:<span class="number">0x08049a58</span></span><br></pre></td></tr></table></figure><br>0x08049a58 大于0x08049a4c 属于bss段是初始化的静态局部变量但是却属于bss段，为什么？<br>原因是：local_C是局部静态变量但是却初始化为零。这和没有初始化，默认是零的情况一样，都存储在bss段，如果初始化为其他的值，那么local_C这个变量就会存储在data段。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>可执行文件大小由什么决定？可执行文件在存储时分为代码段、数据段和BSS段三个部分。<br>程序1:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ar[<span class="number">30000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>程序2:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ar[<span class="number">300000</span>] =  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发现程序2编译之后所得的.exe文件比程序1的要大得多。当下甚为不解，于是手工编译了一下，并使用了/FAs编译选项来查看了一下其各自的.asm，发现在程序1.asm中ar的定义如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_BSS SEGMENT</span><br><span class="line">     ?ar@@<span class="number">3</span>PAHA DD <span class="number">0493e0</span><span class="function">H <span class="title">DUP</span> <span class="params">(?)</span>    </span>; ar</span><br><span class="line">_BSS ENDS</span><br></pre></td></tr></table></figure></p>
<p>而在程序2.asm中，ar被定义为：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_DATA SEGMENT</span><br><span class="line">     ?ar@@<span class="number">3</span>PAHA DD <span class="number">01</span>H     ; ar</span><br><span class="line">                DD <span class="number">02</span>H</span><br><span class="line">                DD <span class="number">03</span>H</span><br><span class="line">                ORG $+<span class="number">1199988</span></span><br><span class="line">_DATA ENDS</span><br></pre></td></tr></table></figure><br>区别很明显，一个位于.bss段，而另一个位于.data段，两者的区别在于：全局的未初始化变量存在于.bss段中，具体体现为一个占位符；全局的已初始化变量存于.data段中；而函数内的自动变量都在栈上分配空间。</p>
<p>.bss是不占用.exe文件空间的，其内容由操作系统初始化（清零）；而.data却需要占用，其内容由程序初始化，因此造成了上述情况。</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
 <a id="more"></a> 
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
