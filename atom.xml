<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>土豆の博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tingyuxuan.com/"/>
  <updated>2019-11-11T03:39:20.000Z</updated>
  <id>http://tingyuxuan.com/</id>
  
  <author>
    <name>嘿你的土豆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vcpkg神器加速下载的方法</title>
    <link href="http://tingyuxuan.com/2019/11/11/vcpkg%E7%A5%9E%E5%99%A8%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://tingyuxuan.com/2019/11/11/vcpkg神器加速下载的方法/</id>
    <published>2019-11-11T03:39:20.000Z</published>
    <updated>2019-11-11T03:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>vcpkg是微软开发的c++语言第三方cpp库应用类似于pycharm中python模块的安装。vcpkg具有优良的特性安装cpp库并自动实现编译，编译之后在vs和vscode能直接使用引用头文件的方法使用第三方库中的文件。但是在第三方库的安装过程中由于网络原因会出现安装失败的情况。经过百度之后笔者发现使用下面的方法可以加速文件的安装：<br><a id="more"></a><br>在安装失败的界面拷贝安装失败的网络路径并使用浏览器下载或者迅雷软件下载到本地，下载完成后将下载到本地的唯洁雅文件拷贝到vcpkg文件夹下面的download界面如笔者的路径F:\vcpkg-2019.10\downloads然后在cmd下vcpkg install xxx即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vcpkg是微软开发的c++语言第三方cpp库应用类似于pycharm中python模块的安装。vcpkg具有优良的特性安装cpp库并自动实现编译，编译之后在vs和vscode能直接使用引用头文件的方法使用第三方库中的文件。但是在第三方库的安装过程中由于网络原因会出现安装失败的情况。经过百度之后笔者发现使用下面的方法可以加速文件的安装：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>C++中的隐式转换和显示转换</title>
    <link href="http://tingyuxuan.com/2019/11/11/C-%E4%B8%AD%E7%9A%84%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%92%8C%E6%98%BE%E7%A4%BA%E8%BD%AC%E6%8D%A2/"/>
    <id>http://tingyuxuan.com/2019/11/11/C-中的隐式转换和显示转换/</id>
    <published>2019-11-11T02:58:19.000Z</published>
    <updated>2019-11-11T02:58:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>类型转换是一门计算机语言所具有的的重要的功能，类型的转换设计到数据的安全问题因此必须受到重视。c++语言继承了c语言的精髓并在其基础上增加了新的内容在类型转换机制上存在显示转换和因式转换两种类型。<br><a id="more"></a><br>首先，c++中存在隐式转换和显示转换两种转换机制。其次，在编程实践中最好在对数据对象设计变量属性的时候选择适当的类型，尽量避免类型转换或者在无法避免使用转换机制时候使用显示类型转换。</p><h4 id="一、隐式类型转换"><a href="#一、隐式类型转换" class="headerlink" title="一、隐式类型转换"></a>一、隐式类型转换</h4><p><strong>定义：</strong>隐式类型转换是系统根据程序的需要自动的转换<br><strong>注意：</strong><br>    <strong>·</strong>在算术表达式中存在由低字节数据类型到高字节数据类型的转换（安全的转换）<br>    <strong>·</strong>算术表达式隐式转换顺序为： 1、char -&gt; int -&gt; long -&gt; double;2、float -&gt; double</p><p><strong>1.转换的常见的几种场景</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.算术表达式</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> n = m;<span class="comment">//n = 10.0;隐式把m转为double类型</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">10.0</span>;</span><br><span class="line"><span class="keyword">double</span> d = m + f;<span class="comment">//n = 20.0;隐式把m和f转为double类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.赋值</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>; <span class="comment">//NULL(0)隐式转换为int*类型的空指针值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.函数入参</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> f)</span></span>;  </span><br><span class="line">add(<span class="number">2</span>); <span class="comment">//2隐式转换为float类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.函数返回值</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">minus</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> a - b; <span class="comment">//返回值隐式转换为double类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.c++类对象的隐式转换</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(CTest test)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTest</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    CTest(<span class="keyword">int</span> m = <span class="number">0</span>); </span><br><span class="line">&#125; </span><br><span class="line">fun(<span class="number">20</span>);<span class="comment">//隐式转换</span></span><br></pre></td></tr></table></figure></p><h4 id="二、显示类型转换"><a href="#二、显示类型转换" class="headerlink" title="二、显示类型转换"></a>二、显示类型转换</h4><p><strong>定义：</strong>显式转换也叫强制转换，是自己主动让这个类型转换成别的类型<br><strong>注意：</strong><br>    <strong>·</strong>在算术表达式中存在由低字节数据类型到高字节数据类型的转换（安全的转换）<br>    <strong>·</strong>算术表达式隐式转换顺序为： 1、char -&gt; int -&gt; long -&gt; double;2、float -&gt; double</p><h5 id="1-C-类型-char-int-float-long-double等-的显式转换"><a href="#1-C-类型-char-int-float-long-double等-的显式转换" class="headerlink" title="1.C++类型(char,int,float,long,double等)的显式转换"></a>1.C++类型(char,int,float,long,double等)的显式转换</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> c = (<span class="keyword">char</span>)m;<span class="comment">//显式把m转为char类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">2.0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">i += <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(d);<span class="comment">//显式把d转换为int类型</span></span><br></pre></td></tr></table></figure><h5 id="1-C-类对象的显式转换"><a href="#1-C-类对象的显式转换" class="headerlink" title="1.C++类对象的显式转换"></a>1.C++类对象的显式转换</h5><p>当类构造函数只有一个参数或除了第一个参数外其余参数都有默认值时，则此类有隐含的类型转换操作符(隐式转换)，但有时隐式转换并不是我们想要的，可在构造函数前加上关键字explicit，来指定显式调用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(CTest test)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTest</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">CTest</span><span class="params">(<span class="keyword">int</span> m = <span class="number">0</span>)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line">fun(<span class="number">20</span>);<span class="comment">//error 隐式转换</span></span><br><span class="line">fun(<span class="keyword">static_cast</span>&lt;CTest&gt;(<span class="number">20</span>)); <span class="comment">//ok 显式转换</span></span><br></pre></td></tr></table></figure></p><h4 id="三、c-中类型转换机制"><a href="#三、c-中类型转换机制" class="headerlink" title="三、c++中类型转换机制"></a>三、c++中类型转换机制</h4><p>类型转换有c风格的,当然还有c++风格的。c风格的转换的格式很简单(TYPE)EXPRESSION,但是c风格的类型转换有不少的缺点,有的时候用c风格的转换是不合适的,因为它可以在任意类型之间转换,比如你可以把一个指向 const对象的指针转换成指向非const对象的指针,把一个指向基类对象的指针转换成指向一个派生类对象的指针,这两种转换之间的差别是巨大的,但是传统的c语言风格的类型转换没有区分这些。还有一个缺点就是,c 风格的转换不容易查找,他由一个括号加上一个标识符组成,而这样的东西在c++程序里一大堆。所以 c++为了克服这些缺点,引进了4新的类型转换操作符。</p><div class="table-container"><table><thead><tr><th>转换函数</th><th>解释</th></tr></thead><tbody><tr><td>static_cast</td><td>静态类型转换</td></tr><tr><td>reinterpreter_cast</td><td>重新解释类型转换</td></tr><tr><td>dynamic_cast</td><td>子类和父类之间的多态类型转换</td></tr><tr><td>const_cast</td><td>去掉const属性转换</td></tr></tbody></table></div><p><strong>1. static_cast 静态类型转换</strong></p><ul><li>static_cast&lt;目标类型&gt;（标识符）</li><li>所谓的静态,即在编译期内即可决定其类型的转换,用的也是最多的一种。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> dPi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = (<span class="keyword">int</span>)dPi;    <span class="comment">//c语言的旧式类型转换</span></span><br><span class="line"><span class="keyword">int</span> num2 = dPi;         <span class="comment">//隐式类型转换</span></span><br><span class="line"><span class="comment">// 静态的类型转换:   </span></span><br><span class="line"><span class="comment">// 在编译的时 进⾏行基本类型的转换 能替代c⻛风格的类型转换 可以进⾏行⼀一部分检查     </span></span><br><span class="line"><span class="keyword">int</span> num3 = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt; (dPi); <span class="comment">//c++的新式的类型转换运算符   </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num1:"</span> &lt;&lt; num1 &lt;&lt; <span class="string">" num2:"</span> &lt;&lt; num2 &lt;&lt; <span class="string">" num3:"</span> &lt;&lt; num3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. dynamic_cast 子类与父类之间的多态类型准换</strong></p><ul><li>dynamic_cast&lt;目标类型&gt;（标识符）</li><li>用于多态中父子类之间的多态转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"旺旺"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dohome</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"看家"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"喵喵"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dohome</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"抓老鼠"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* base = <span class="literal">NULL</span>;</span><br><span class="line">base = <span class="keyword">new</span> Cat();</span><br><span class="line">base-&gt;cry();</span><br><span class="line"></span><br><span class="line"><span class="comment">//⽤用于将⽗父类指针转换成⼦子类，</span></span><br><span class="line">Dog*pDog = <span class="keyword">dynamic_cast</span>&lt;Dog*&gt;(base); <span class="comment">//此时转换时失败的，因为父类指针现在指向的对象是猫，所以转换狗是失败的。</span></span><br><span class="line">                                      <span class="comment">//转换失败返回空（NULL）</span></span><br><span class="line"><span class="keyword">if</span> (pDog != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pDog-&gt;cry();</span><br><span class="line">pDog-&gt;dohome();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cat* pCat = <span class="keyword">dynamic_cast</span>&lt;Cat*&gt;(base); <span class="comment">//此时转换成功，成功将父类指针转换成子类指针</span></span><br><span class="line"><span class="keyword">if</span> (pCat != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pCat-&gt;cry();</span><br><span class="line">pCat-&gt;dohome();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.const_cast 去掉const属性转换</strong></p><ul><li>const_cast&lt;目标类型&gt;（标识符）:目标类型只能是指针或者引用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> A a = &#123; <span class="number">200</span> &#125;;</span><br><span class="line">A a1 = <span class="keyword">const_cast</span>&lt;A&gt;(a);    <span class="comment">//错误，const_cast 目标类型只能是引用或者指针</span></span><br><span class="line">a1.data = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">A&amp; a2 = <span class="keyword">const_cast</span>&lt;A&amp;&gt;(a);</span><br><span class="line">a2.data = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.data &lt;&lt; <span class="string">' '</span> &lt;&lt; a2.data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">A* a3 = <span class="keyword">const_cast</span>&lt;A*&gt;(&amp;a);</span><br><span class="line">a3-&gt;data = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.data &lt;&lt; <span class="string">' '</span> &lt;&lt; a3-&gt;data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>&amp; x1 = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(x);</span><br><span class="line">x1 = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; x1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* x2 = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(&amp;x);</span><br><span class="line">*x2 = <span class="number">300</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; *x2 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.reinterpret_cast 重新解释类型转换</strong></p><ul><li>reinterpret_cast&lt;目标类型&gt;（标识符）</li><li>数据的二进制重新解释，但是不改变其值。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Animal cry"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">look</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Book look "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* a = <span class="keyword">new</span> Animal();</span><br><span class="line">a-&gt;cry();</span><br><span class="line">Book* b = <span class="keyword">reinterpret_cast</span>&lt;Book*&gt;(a);  <span class="comment">//强制类型的转换</span></span><br><span class="line">b-&gt;look();</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、补充explicity的用法"><a href="#四、补充explicity的用法" class="headerlink" title="四、补充explicity的用法"></a>四、补充explicity的用法</h4><p>在使用该关键字之前我们已经了解了c++类对象的延时类型转换我们看下面一段代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">double</span> real;</span><br><span class="line">        <span class="keyword">double</span> imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 默认构造器无explicity关键字</span></span><br><span class="line">        Complex(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : real(r), imag(i) &#123;&#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 比较操作符==，接受一个Complex的参数</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> == (Complex rhs) &#123;</span><br><span class="line">           <span class="keyword">return</span> (real == rhs.real &amp;&amp; imag == rhs.imag)? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a Complex object</span></span><br><span class="line">    <span class="function">Complex <span class="title">com1</span><span class="params">(<span class="number">3.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (com1 == <span class="number">3.0</span>)<span class="comment">//将Complex与double类型比较</span></span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Same"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Not Same"</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>输出的结果为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Same</span><br></pre></td></tr></table></figure><br>上面Complex的==操作符接受的是一个Complex参数。当程序运行到com1 == 3.0时，程序会自动调用Complex的构造器并且传入参数3.0，然后得到一个新的Complex对象，再将这个新对象传给com1的==操作符。所以程序表面上看起来是Complex和double在进行比较，但实际上程序做了隐式的转化（将double转成了Complex），依然是两个Complex在比较。</p><p>在C++中如果一个类有能够被单参数所调用的构造器，那么这个构造器就被称为转化构造器——转化构造器允许从单参数到类构造的转化。C++中能够接受单参数的构造器默认都是转化构造器。那么如何避免这种隐式的转化呢？可以使用explicity关键字。使用了explicity关键字的构造器就不允许上面的隐式转化，要转化的话，只能强制转化。我们修改后的程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">double</span> real;</span><br><span class="line">        <span class="keyword">double</span> imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 在构造器上加入explicity关键字</span></span><br><span class="line">        explicit Complex(double r = 0.0, double i = 0.0) : real(r), imag(i) &#123;&#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 比较操作符==，接受一个Complex的参数</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>== (Complex rhs) &#123;</span><br><span class="line">           <span class="keyword">return</span> (real == rhs.real &amp;&amp; imag == rhs.imag)? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// a Complex object</span></span><br><span class="line">    <span class="function">Complex <span class="title">com1</span><span class="params">(<span class="number">3.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if (com1 == 3.0)//编译错误</span></span><br><span class="line">    <span class="keyword">if</span> (com1 == (Complex)<span class="number">3.0</span>) <span class="comment">//Complex的构造器使用了explicity关键字，就只能进行强制转化了。</span></span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Same"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; <span class="string">"Not Same"</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在案例中，我们可以将double转化为Complex，但是必需强制转化。下面是一个赋值的案例(Complex的构造器上无 explicity 关键字)：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Complex <span class="title">com1</span><span class="params">(<span class="number">3.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">Complex com2 = <span class="number">3.0</span>;<span class="comment">//将一个3.0赋值给Complex对象</span></span><br></pre></td></tr></table></figure><br>第一个语句是传入参数构造器Complex对象，这没有什么可讨论的。第二个语句将3.0赋值给了Complex对象，其实原理和上面是一样的，首先传入参数3.0到Complex的构造器构造一个临时Complex对象，然后再将临时Complex对象传给com2对象。</p><p>如果给Complex构造器加上explicity关键字，那么就变成如下的形式了：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complex com2 = (Complex)<span class="number">3.0</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型转换是一门计算机语言所具有的的重要的功能，类型的转换设计到数据的安全问题因此必须受到重视。c++语言继承了c语言的精髓并在其基础上增加了新的内容在类型转换机制上存在显示转换和因式转换两种类型。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python模块的安装方式</title>
    <link href="http://tingyuxuan.com/2019/11/08/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F/"/>
    <id>http://tingyuxuan.com/2019/11/08/python模块的安装方式/</id>
    <published>2019-11-08T10:56:45.000Z</published>
    <updated>2019-11-08T10:56:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>python模块的安装因为网络的原因容易安装失败最好的方法是使用国内源的方法安装，自己在模块安装实践中有以下几种方法：<br><a id="more"></a></p><h4 id="whel方法安装"><a href="#whel方法安装" class="headerlink" title="whel方法安装"></a>whel方法安装</h4><p>1.将.whl格式的文件移动到C:\Users\luckydog目录下<br>2.pip install XXXX.whl即可<br>3.安装源：<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> </p><h4 id="豆瓣源安装方式："><a href="#豆瓣源安装方式：" class="headerlink" title="豆瓣源安装方式："></a>豆瓣源安装方式：</h4><p>pip install -i <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a> ipython<br>pip install -U <a href="https://pypi.douban.com/simple/" target="_blank" rel="noopener">https://pypi.douban.com/simple/</a> Django</p><h4 id="pycharm安装方式："><a href="#pycharm安装方式：" class="headerlink" title="pycharm安装方式："></a>pycharm安装方式：</h4><p>在pycharm软件安装方式下，可以使用清华源进行安装，效果最佳</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python模块的安装因为网络的原因容易安装失败最好的方法是使用国内源的方法安装，自己在模块安装实践中有以下几种方法：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>winows下vscode多文件编译运行配置</title>
    <link href="http://tingyuxuan.com/2019/11/08/winows%E4%B8%8Bvscode%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://tingyuxuan.com/2019/11/08/winows下vscode多文件编译运行配置/</id>
    <published>2019-11-08T03:29:05.000Z</published>
    <updated>2019-11-08T03:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>vscode编译器的好处在这里就不多赘述，现在开始搭建windows系统下使用cmake和Mingw64搭建完整的c/c++多文件开发环境，搭建开发环境分为以下几步：<br><a id="more"></a><br>第一步，下载文件mingw文件到本地，并将下载好的mingw文件夹下的bin目录作为环境变量配置在path路径下，本文下载mingw64版本并将其下载解压在C盘目录下。<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108114551.png" alt><br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108114759.png" alt></p><p>第二步，在任意硬盘或者桌面建立一个用于放置项目文件的文件夹，并在文件夹里建立以下几个文件。<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108112230.png" alt></p><p>第三步，下载cmake软件，在官方网站<a href="https://cmake.org/download/" target="_blank" rel="noopener">https://cmake.org/download/</a><br>目录下为自己的操作系统windows下载最新合适的cmake安装文件进行安装并为cmake配置环境变量。<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108114707.png" alt></p><p>第四步，在.vscode文件中为vscode配置调试环境分别建立launch.json和c_cpp_properties.json文件，在launch.json文件中拷贝如下内容:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Launch CMake-built program"</span>,</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;command:cmake.launchTargetPath&#125;"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [],</span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="string">"environment"</span>: [],</span><br><span class="line">            <span class="string">"externalConsole"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line"><span class="string">"miDebuggerPath"</span>: <span class="string">"C:\\mingw64\\bin\\gdb.exe"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="string">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="string">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在c_cpp_properties.json中拷贝如下内容:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"MinGW64"</span>,</span><br><span class="line">            <span class="string">"intelliSenseMode"</span>: <span class="string">"gcc-x64"</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="string">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;/Inc/"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"browse"</span>: &#123;</span><br><span class="line">                <span class="string">"path"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;/Inc/"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="string">"cppStandard"</span>: <span class="string">"c++17"</span>,</span><br><span class="line">            <span class="string">"configurationProvider"</span>: <span class="string">"vector-of-bool.cmake-tools"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"version"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第五步，准备插件：在vscode插件商店里下载Cmake Tools以及Cmake插件，<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108111334.png" alt><br>下载完成之后在第二步建立文件夹下的CMakeLists.txt文件中拷贝如下内容：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 最低CMake版本要求</span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.10</span><span class="number">.0</span>)</span><br><span class="line"></span><br><span class="line"># 项目名称</span><br><span class="line">project(cmake-test)</span><br><span class="line"></span><br><span class="line"># 设置C/C++开关</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class="line"></span><br><span class="line"># 头文件路径</span><br><span class="line">include_directories(<span class="string">"Inc"</span>)</span><br><span class="line"></span><br><span class="line"># 枚举头文件</span><br><span class="line">file(GLOB_RECURSE INCLUDES <span class="string">"Inc/*.h"</span> <span class="string">"Inc/*.hpp"</span> <span class="string">"Inc/*.cpp"</span> <span class="string">"Inc/*.c"</span> )</span><br><span class="line"></span><br><span class="line"># 枚举源文件</span><br><span class="line">aux_source_directory(<span class="string">"Src"</span> SOURCES )</span><br><span class="line"></span><br><span class="line"># 输出路径</span><br><span class="line"><span class="built_in">set</span>(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line"># 生成可执行的文件</span><br><span class="line">add_executable($&#123;PROJECT_NAME&#125; $&#123;SOURCES&#125; $&#123;INCLUDES&#125;)</span><br></pre></td></tr></table></figure></p><p>第六步，在Inc文件夹中就可以编辑c/c++文件，在Src中建立main.c/main.cpp文件，按Ctrl+shift+p为该文件适配安装的cmake gcc版本，按F5完成文件的编译和运行。<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191108114116.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vscode编译器的好处在这里就不多赘述，现在开始搭建windows系统下使用cmake和Mingw64搭建完整的c/c++多文件开发环境，搭建开发环境分为以下几步：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>gcc版本下载资源网站</title>
    <link href="http://tingyuxuan.com/2019/11/07/gcc%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
    <id>http://tingyuxuan.com/2019/11/07/gcc版本下载资源网站/</id>
    <published>2019-11-07T02:51:11.000Z</published>
    <updated>2019-11-07T02:51:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>国内好用的已经编译好的gcc版本文件源地址:<a href="https://gcc-mcf.lhmouse.com/" target="_blank" rel="noopener">https://gcc-mcf.lhmouse.com/</a><br>在该页面下载相应的版本文件替换自己已经存在的mingw文件就ok，推荐!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;国内好用的已经编译好的gcc版本文件源地址:&lt;a href=&quot;https://gcc-mcf.lhmouse.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gcc-mcf.lhmouse.com/&lt;/a&gt;&lt;br&gt;在该页面下载相应的
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://tingyuxuan.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>8086CPU的一些认知</title>
    <link href="http://tingyuxuan.com/2019/11/06/8086CPU%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E7%9F%A5/"/>
    <id>http://tingyuxuan.com/2019/11/06/8086CPU的一些认知/</id>
    <published>2019-11-06T06:10:17.000Z</published>
    <updated>2019-11-06T06:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h4><p>首先浅要介绍一下Intel CPU 的发展史吧：Intel CPU 系列，最初是 4 位微处理器 4004，然后到到 8 位微处理器的 8008 ，再到 8 微微处理器 8080,以及稍后的 16 位微处理器 8086，由 8086 开始，Intel 进入现在所谓的  x86  时代 。Intel  8086 为 16 位  CPU ，而因为在 8086 之前的 CPU 都是 8 位 CPU，这样也就造成了很多的外设也只支持 8 位，因此  Intel  紧接着就退出了 8 位的 8088 CPU，因此  Intel 8088 也就可以看做是 8086 的 8 位版本；如果是但从汇编语言的角度上来说，8086 和 8088 是没有区别的，即 8086 上跑的程序可以不加修改的移植到 8088，8088上跑的程序也可以不加修改的移植到 8086 上，当然，还是有些特殊的地方是不同的，而这些基本上在这里可以忽略掉，在 8088  CPU 之后，Intel  又推出了  80186 ，80286 ，这两款 CPU 均是 16 位  CPU，而对于 80186 来说，其与 8086 的区别可以简单的看做是 80186 多了几条指令而已，而 80286 则不同，80286 的地址总线数目有了变化，在 8086 , 8088 , 80186 上，CPU 的地址总线都是 20 根，即可最大寻址 220 即达到 1MB 的寻址能力，而对于 80286 CPU 来说，其地址总线数目达到了 24 根，从而最大寻址能力为 224 即 16MB。<br><a id="more"></a></p><p>由于支持更多的物理内存寻址，因此 80286 便开始成为了多任务，多用户系统的核心。而后来，Intel  又推出了 80386 ，80386 为 32 位微处理器，Intel 80x86 家族的 32 位微处理器始于 80386；同时 80386 也完全兼容先前的 8086/8088，80186，80286，并且 80386 全面支持 32 位数据类型和 32 位操作，并且 80386 的数据总线根数和地址总线根数均达到了 32 根，从而可以最大物理寻址为 232  即 4GB 。</p><p>而之后的 80486 也是 32 位微处理器，而后又出来了 Pentium 和 Pentium Pro 等等第五代微处理器，这些处理器虽然也是 32 位微处理器，但是他们的数据总线和地址总线都有所扩展，比如 Pentium 的数据总线达到 64 位，而 Pentium Pro 的地址总线位数达到了 36 位 。好，关于 Intel CPU 的介绍就到这里了，下面就要开始回归中心，看 CPU 中的寄存器了，</p><p>首先，从学习的角度来说，从 8086/8088  CPU 下手是不错的选择，而我这里选择的也是 8086 CPU 而已，说实在的，像 80386 CPU 我也还没有研究过，像奔腾这些，呵呵，扯更远了，说到底也就只能拿 8086 出来晒晒而已，当然，从 8086 开始也是学习的最佳路径 。</p><p>说了这么久，到底寄存器是什么呢？其实很简单，寄存器就是个存储信息的单元或者说是器件又或者说是容器而已，就比如内存也是一个存储介质或者说是存储单元而已，其实寄存器从理解上来说和内存差不多，只不过寄存器（这里讨论的寄存器都是 CPU 中的寄存器，不包括外设上的寄存器）位于  CPU  内部，而内存位于 CPU 外部，而且，寄存器比内存可是珍贵得多啊，就拿内存和硬盘来比，肯定是内存在使用上珍贵得多，是 PC 中的稀有资源，而寄存器是 CPU 中的稀有资源，内存和寄存器相比就像硬盘和内存相比一样 。而对于一个汇编程序员来说，CPU 中主要可以使用的也就是寄存器而已，汇编程序员可以使用指令来读写 CPU 中的寄存器，<br>从而可以实现对于 CPU 的控制，当然，不同的 CPU ，寄存器的个数和结构都是不一样的，比如 8086 CPU 中，寄存器的个数也就 14 个而已，并且 8086 CPU 中所有的寄存器的结构为 16 位，即一个寄存器中可以存放下 2B 即 2 个字节，而到了 80386 CPU 中，寄存器的个数也比 8086 增多了，比如在 80386 中添加了系统地址寄存器等寄存器，同时寄存器的结构也变了，比如在 80386 中绝大多数的寄存器为 32 位，而有些寄存器则是 16 位 。</p><p>8086  CPU 中寄存器总共为 14 个，且均为 16 位 。即 AX，BX，CX，DX，SP，BP，SI，DI，IP，FLAG，CS，DS，SS，ES 共 14 个。而这 14 个寄存器按照一定方式又分为了通用寄存器，控制寄存器和段寄存器。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;开头&quot;&gt;&lt;a href=&quot;#开头&quot; class=&quot;headerlink&quot; title=&quot;开头&quot;&gt;&lt;/a&gt;开头&lt;/h4&gt;&lt;p&gt;首先浅要介绍一下Intel CPU 的发展史吧：Intel CPU 系列，最初是 4 位微处理器 4004，然后到到 8 位微处理器的 8008 ，再到 8 微微处理器 8080,以及稍后的 16 位微处理器 8086，由 8086 开始，Intel 进入现在所谓的  x86  时代 。Intel  8086 为 16 位  CPU ，而因为在 8086 之前的 CPU 都是 8 位 CPU，这样也就造成了很多的外设也只支持 8 位，因此  Intel  紧接着就退出了 8 位的 8088 CPU，因此  Intel 8088 也就可以看做是 8086 的 8 位版本；如果是但从汇编语言的角度上来说，8086 和 8088 是没有区别的，即 8086 上跑的程序可以不加修改的移植到 8088，8088上跑的程序也可以不加修改的移植到 8086 上，当然，还是有些特殊的地方是不同的，而这些基本上在这里可以忽略掉，在 8088  CPU 之后，Intel  又推出了  80186 ，80286 ，这两款 CPU 均是 16 位  CPU，而对于 80186 来说，其与 8086 的区别可以简单的看做是 80186 多了几条指令而已，而 80286 则不同，80286 的地址总线数目有了变化，在 8086 , 8088 , 80186 上，CPU 的地址总线都是 20 根，即可最大寻址 220 即达到 1MB 的寻址能力，而对于 80286 CPU 来说，其地址总线数目达到了 24 根，从而最大寻址能力为 224 即 16MB。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>X86段机制页机制详解</title>
    <link href="http://tingyuxuan.com/2019/11/06/X86%E6%AE%B5%E6%9C%BA%E5%88%B6%E9%A1%B5%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://tingyuxuan.com/2019/11/06/X86段机制页机制详解/</id>
    <published>2019-11-05T21:24:29.000Z</published>
    <updated>2019-11-05T21:24:29.000Z</updated>
    
    <content type="html"><![CDATA[<center><font face="楷体" size="4">注：本文的主要内容来自对《深入分析linux内核源代码》的整理，linux内核版本为2.4.16</font></center><h4 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h4><p>MOVE REG，ADDR ; 它把地址为ADDR（假设为10000）的内存单元的内容复制到REG中在8086 的实模式下，把某一段寄存器(基地址)左移4 位，然后与地址ADDR 相加后被直接送到内存总线上，这个相加后的地址(20位)就是内存单元的物理地址，而程序中的这个地址ADDR就叫逻辑地址(或叫虚拟地址)。<font face="楷体" size="4">在80386 的段机制中，逻辑地址由两部分组成，即段部分（选择符）及偏移部分。</font></p><a id="more"></a><p>段是形成逻辑地址到线性地址转换的基础。如果我们把段看成一个对象的话，那么对它的描述如下。<br>• 段的基地址(Base Address):在线性地址空间中段的起始地址。<br>• 段的界限(Limit):表示在逻辑地址中，段内可以使用的最大偏移量。<br>• 段的属性(Attribute):表示段的特性。例如，该段是否可被读出或写入，或者该段是否作为一个程序来执行，以及段的特权级等。</p><h4 id="逻辑地址、线性地址和物理地址"><a href="#逻辑地址、线性地址和物理地址" class="headerlink" title="逻辑地址、线性地址和物理地址"></a>逻辑地址、线性地址和物理地址</h4><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106053402.png" alt="qq"></p><center><font face="楷体" size="4">图1 MMU把逻辑地址转换为物理地址过程</font></center>#### 用户段描述符(User Descriptor)![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106060132.png)<center><font face="楷体" size="4">图2 存取权字节的一般格式</font></center>一个段描述符指出了段的32 位基地址和20 位段界限（即段大小）。第6 个字节的G 位是粒度位，当G=0 时，段长表示段格式的字节长度，即一个段最长可达1M  字节。当G=1 时，段长表示段的以4K 字节为一页的页的数目，即一个段最长可达1M×4K=4G 字节。D 位表示缺省操作数的大小，如果D=0，操作数为16 位，如果D=1，操作数为32 位。    第7 位P 位（Present） 是存在位，表示段描述符描述的这个段是否在内存中，如果在内存中。P=1；如果不在内存中，P=0。DPL（Descriptor Privilege Level），就是描述符特权级，它占两位，其值为0～3，用来确定这个段的特权级即保护等级。0为内核级别，3为用户级别。S 位（System）表示这个段是系统段还是用户段。如果S=0，则为系统段，如果S=1，则为用户程序的代码段、数据段或堆栈段。类型占3 位，第3 位为E 位，表示段是否可执行。当E=0 时，为数据段描述符，这时的第2 位ED 表示地址增长方向。第1  位（W）是可写位。当段为代码段时，第3 位E=1，这时第2 位为一致位（C）。当C=1 时，如果当前特权级低于描述符特权级，并且当前特权级保持不变，那么代码段只能执行。所谓当前特权级CPL（Current  Privilege Level），就是当前正在执行的任务的特权级。第1 位为可读位R。存取权字节的第0 位A 位是访问位，用于请求分段不分页的系统中，每当该段被访问时，将A 置1。对于分页系统，则A 被忽略未用。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062438.png)<center><font face="楷体" size="4">图3 数据段的存取字节</font></center><p><img src="/images/2019/11/06/bc583af0-001a-11ea-8860-b9b91b2a10f8.png" alt="image.png"></p><center><font face="楷体" size="4">图4 代码段的存取字节</font></center>#### 系统段描述符(Sys Descriptor)![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062329.png)<center><font face="楷体" size="4">图5 系统段描述符一般格式</font></center>系统段描述符的第5 个字节的第4 位为0，说明它是系统段描述符，类型占4 位，没有A 位。第6 个字节的第6 位为0，说明系统段的长度是字节粒度，所以，一个系统段的最大长度为1M字节。系统段的类型为16 种，如图2.15 所示。在这16 种类型中，保留类型和有关286 的类型不予考虑。门也是一种描述符,有调用门、任务门、中断门和陷阱门4  种门描述符。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062556.png)<center><font face="楷体" size="4">图6 系统段的类型</font></center>#### 选择符、描述符表和描述符表寄存器描述符表（即段表）定义了386 系统的所有段的情况。所有的描述符表本身都占据一个字节为8 的倍数的存储器空间，空间大小在8 个字节（至少含一个描述符）到64K 字节（至多含8K=8192）个描述符之间。1.全局描述符表（GDT）全局描述符表GDT（Global Descriptor Table），除了任务门，中断门和陷阱门描述符外，包含着系统中所有任务都共用的那些段的描述符。它的第一个8 字节位置没有使用。2.中断描述符表（IDT）中断描述符表IDT（Interrupt Descriptor Table），包含256 个门描述符。IDT 中只能包含任务门、中断门和陷阱门描述符，虽然IDT 表最长也可以为64K 字节，但只能存取2K字节以内的描述符，即256  个描述符，这个数字是为了和8086 保持兼容。3.局部描述符表（LDT）![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062802.png)<center><font face="楷体" size="4">图7 选择符表结构</font></center>局部描述符表LDT（Local Descriptor Table），包含了与一个给定任务有关的描述符，每个任务各自有一个的LDT。有了LDT，就可以使给定任务的代码、数据与别的任务相隔离。每一个任务的局部描述符表LDT  本身也用一个描述符来表示，称为LDT 描述符，它包含了有关局部描述符表的信息，被放在全局描述符表GDT 中，使用LDTR进行索引。在实模式下，段寄存器存储的是真实的段基址，在保护模式下，16 位的段寄存器无法放下32 位的段基址，因此，它们被称为选择符，即段寄存器的作用是用来选择描述符。选择符的结构如图2.16  所示。可以看出，选择符有3 个域：第15~3 位这13 位是索引域，表示的数据为0~8129，用于指向全局描述符表中相应的描述符。第2 位为选择域，如果TI=1，就从局部描述符表中选择相应的描述符，如果TI=0，就从全局描述符表中选择描述符。第1、0  位是特权级，表示选择符的特权级，被称为请求者特权级RPL（Requestor Privilege Level）。只有请求者特权级RPL  高于（数字低于）或等于相应的描述符特权级DPL，描述符才能被存取，这就可以实现一定程度的保护。下面讲一下在没有分页操作时，寻址一个存储器操作数的步骤。(1)在段选择符中装入16 位数，同时给出32 位地址偏移量（比如在ESI、EDI 中等）。(2)先根据相应描述符表寄存器中的段地址（确定描述符表的地址）和段界限（确定描述符表的大小），根据段选择符的TI决定从哪种描述符表中取，再根据段选择符的索引找到相应段描述符的位置，比较RPL与DPL，若该段无问题，就取出相应的段描述符放入段描述符高速缓冲寄存器中。(3)将段描述符中的32 位段基地址和放在ESI、EDI 等中的32 位有效地址相加，就形成了32 位物理地址。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106062851.png)<center><font face="楷体" size="4">图8 寻址过程</font></center>#### linux中的段机制从2.2 版开始，Linux 让所有的进程（或叫任务）都使用相同的逻辑地址空间，因此就没有必要使用局部描述符表LDT。Linux 在启动的过程中设置了段寄存器的值和全局描述符表GDT 的内容，段寄存器的定义在include/asm-i386/segment.h 中：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KERNEL_CS 0x10 <span class="comment">//内核代码段，index=2,TI=0,RPL=0 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KERNEL_DS 0x18 <span class="comment">//内核数据段, index=3,TI=0,RPL=0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __USER_CS   0x23 <span class="comment">//用户代码段, index=4,TI=0,RPL=3</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __USER_DS   0x2B <span class="comment">//用户数据段, index=5,TI=0,RPL=3</span></span></span><br></pre></td></tr></table></figure>从定义看出，没有定义堆栈段，实际上，Linux 内核不区分数据段和堆栈段，这也体现了Linux 内核尽量减少段的使用。因为没有使用LDT，因此，TI=0，并把这4 个段描述符都放在GDT中,  index 就是某个段描述符在GDT 表中的下标。内核代码段和数据段具有最高特权，因此其RPL为0，而用户代码段和数据段具有最低特权，因此其RPL 为3。全局描述符表的定义在arch/i386/kernel/head.S 中：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ENTRY（gdt_table）</span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* NULL descriptor */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br><span class="line">.quad <span class="number">0x00cf9a000000ffff</span> <span class="comment">/* 0x10 kernel 4GB code at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cf92000000ffff</span> <span class="comment">/* 0x18 kernel 4GB data at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cffa000000ffff</span> <span class="comment">/* 0x23 user 4GB code at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x00cff2000000ffff</span> <span class="comment">/* 0x2b user 4GB data at 0x00000000 */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br><span class="line">.quad <span class="number">0x0000000000000000</span> <span class="comment">/* not used */</span></span><br></pre></td></tr></table></figure>从代码可以看出，GDT 放在数组变量gdt_table 中。按Intel 规定，GDT 中的第一项为空，这是为了防止加电后段寄存器未经初始化就进入保护模式而使用GDT 的。第二项也没用。从下标2～5  共4 项对应于前面的4 种段描述符值。对照图2.10，从描述符的数值可以得出：• 段的基地址全部为0x00000000；• 段的上限全部为0xffff；• 段的粒度G 为1，即段长单位为4KB；• 段的D 位为1，即对这4 个段的访问都为32 位指令；• 段的P 位为1，即4 个段都在内存。由此可以得出，每个段的逻辑地址空间范围为0～4GB。每个段的基地址为0，因此，逻辑地址到线性地址映射保持不变，也就是说，偏移量就是线性地址，我们以后所提到的逻辑地址（或虚拟地址）和线性地址指的也就是同一地址。看来，Linux  巧妙地把段机制给绕过去了，它只把段分为两种：用户态（RPL＝3）的段和内核态（RPL=0）的段，而完全利用了分页机制。按Intel 的规定，每个进程有一个任务状态段（TSS）和局部描述符表LDT，但Linux 也没有完全遵循Intel 的设计思路。如前所述，Linux 的进程没有使用LDT，而对TSS 的使用也非常有限，每个CPU  仅使用一个TSS。TSS 有它自己 8 字节的任务段描述符（Task State Segment Descriptor ，简称TSSD）。这个描述符包括指向TSS 起始地址的32 位基地址域，20 位界限域，界限域值不能小于十进制104（由TSS  段的最小长度决定）。TSS 描述符存放在GDT 中，它是GDT 中的一个表项，由中断描述符表（IDT）中的任务门（存放TSS段的选择符）装入TR来进行索引。#### 页目录项、页表项、页面项80386 使用4K 字节大小的页。每一页都有4K 字节长，并在4K 字节的边界上对齐，即每一页的起始地址都能被4K 整除。因此，80386 把4G 字节的线性地址空间，划分为1G 个页面，每页有4K  字节大小。分页机制通过把线性地址空间中的页，重新定位到物理地址空间来进行管理，因为每个页面的整个4K 字节作为一个单位进行映射，并且每个页面都对齐4K 字节的边界，因此，线性地址的低12 位经过分页机制直接地作为物理地址的低12 位使用。页目录表，存储在一个4K 字节的页面中，最多可包含1024  个页目录项，每个页目录项为4 个字节，结构如图9所示。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063019.png)<center><font face="楷体" size="4">图9 页目录中的页目录项</font></center><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063116.png" alt></p><center><font face="楷体" size="4">图10 由U/S和R/W提供的保护</font></center>• 第31~12位是20位页表地址，由于页表地址的低12位总为0，所以用高20 位指出32位页表地址就可以了。• 第0位是存在位，如果P=1，表示页表地址指向的该页在内存中，如果P=0，表示不在内存中。• 第1位是读/写位，第2 位是用户/管理员位，这两位为页目录项提供硬件保护。当特权级为3  的进程要想访问页面时，需要通过页保护检查，而特权级为0 的进程就可以绕过页保护，如图2.23 所示。• 第3位是PWT（Page Write-Through）位，表示是否采用写透方式，写透方式就是既写内存（RAM）也写高速缓存,该位为1  表示采用写透方式。• 第4位是PCD（Page Cache Disable）位，表示是否启用高速缓存，该位为1 表示启用高速缓存。• 第5位是访问位，当对页目录项进行访问时，A位=1。• 第7位是Page Size 标志，只适用于页目录项。如果置为1，页目录项指的是4MB 的页面，即扩展分页。80386的每个页目录项指向一个页表，存储在一个4K字节的页面中，页表最多含有1024个页面项，每项4  个字节，包含页面的起始地址和有关该页面的信息。页面的起始地址也是4K的整数倍，所以页面的低12位也留作它用，如图2.24所示。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063246.png)<center><font face="楷体" size="4">图11 页表中的页面项</font></center>第31～12位是20位物理页面地址，除第6位外第0～5位及9～11位的用途和页目录项一样，第6位是页面项独有的，当对涉及的页面进行写操作时，D位被置1。4GB的存储器只有一个页目录，它最多有1024个页目录项，每个页目录项又含有1024个页面项，因此，存储器一共可以分成1024×1024=1M个页面。由于每个页面为4K个字节，所以，存储器的大小正好最多为4GB。当访问一个操作单元时，如何由分段结构确定的32位线性地址通过分页操作转化成32位物理地址呢？第一步，CR3包含着页目录的起始地址，用32位线性地址的最高10位A31~A22作为页目录表的页目录项的索引，将它乘以4，与CR3 中的页目录表的起始地址相加，形成相应页目录项的地址。第二步，从指定的地址中取出32位页目录项，它的低12位为0，这32位是页表的起始地址。用32位线性地址中的A21~A12位作为页表中的页表项的索引，将它乘以4，与页表的起始地址相加，形成相应页表项的地址。第三步，从指定地址中取出32位页表项，它的低12位为0，这32位是页面地址，将A11~A0作为相对于页面地址的偏移量，与32位页面地址相加，形成32位物理地址。![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106070415.png)<center><font face="楷体" size="4">图12 两级页表结构</font></center>#### linux 中的分页机制Linux 的分段机制使得所有的进程都使用相同的段寄存器值，这就使得内存管理变得简单，也就是说，所有的进程都使用同样的线性地址空间（0～4GB）。Linux  采用三级分页模式而不是两级。如图2.28 所示为三级分页模式，为此，Linux定义了3 种类型的表。• 总目录PGD（Page Global Directory）• 中间目录PMD（Page Middle Derectory）• 页表PT（Page Table）![](https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106063456.png)<center><font face="楷体" size="4">图13 Linux三级分页</font></center>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;font face=&quot;楷体&quot; size=&quot;4&quot;&gt;注：本文的主要内容来自对《深入分析linux内核源代码》的整理，linux内核版本为2.4.16&lt;/font&gt;&lt;/center&gt;


&lt;h4 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h4&gt;&lt;p&gt;MOVE REG，ADDR ; 它把地址为ADDR（假设为10000）的内存单元的内容复制到REG中在8086 的实模式下，把某一段寄存器(基地址)左移4 位，然后与地址ADDR 相加后被直接送到内存总线上，这个相加后的地址(20位)就是内存单元的物理地址，而程序中的这个地址ADDR就叫逻辑地址(或叫虚拟地址)。&lt;font face=&quot;楷体&quot; size=&quot;4&quot;&gt;在80386 的段机制中，逻辑地址由两部分组成，即段部分（选择符）及偏移部分。&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="http://tingyuxuan.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="计算机组成原理" scheme="http://tingyuxuan.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存的作用</title>
    <link href="http://tingyuxuan.com/2019/11/05/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://tingyuxuan.com/2019/11/05/虚拟内存的作用/</id>
    <published>2019-11-05T05:35:23.000Z</published>
    <updated>2019-11-05T05:35:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h4><p>虚拟地址的整个想法是这样的：把程序给出的地址看做是一种虚拟地址（Virtual Address），然后通过某些映射的方法，将这个虚拟地址转换成实际的物理地址。这样，只要我们能够妥善地控制这个虚拟地址到物理地址的映射过程，就可以保证程序每次运行时都可以使用相同的地址。<br><a id="more"></a></p><p>例如，上面代码中变量 a 的地址是 0X402000，第一次运行时它对应的物理内存地址可能是 0X12ED90AA，第二次运行时可能又对应 0XED90，而我们的程序不需要关心这些，这些繁杂的内存管理工作交给操作系统处理即可。</p><p>让我们回到程序的运行本质上来。用户程序在运行时不希望介入到这些复杂的内存管理过程中，作为普通的程序，它需要的是一个简单的执行环境，有自己的内存，有自己的CPU，好像整个程序占有整个计算机而不用关心其他的程序。</p><p>除了在编程时可以使用固定的内存地址，给程序员带来方便外，使用虚拟地址还能够使不同程序的地址空间相互隔离，提高内存使用效率。</p><h4 id="使不同程序的地址空间相互隔离"><a href="#使不同程序的地址空间相互隔离" class="headerlink" title="使不同程序的地址空间相互隔离"></a>使不同程序的地址空间相互隔离</h4><p>如果所有程序都直接使用物理内存，那么程序所使用的地址空间不是相互隔离的。恶意程序可以很容易改写其他程序的内存数据，以达到破坏的目的；有些非恶意、但是有 Bug 的程序也可能会不小心修改其他程序的数据，导致其他程序崩溃。</p><p>这对于需要安全稳定的计算机环境的用户来说是不能容忍的，用户希望他在使用计算机的时候，其中一个任务失败了，至少不会影响其他任务。</p><p>使用了虚拟地址后，程序A和程序B虽然都可以访问同一个地址，但它们对应的物理地址是不同的，无论如何操作，都不会修改对方的内存。</p><h4 id="提高内存使用效率"><a href="#提高内存使用效率" class="headerlink" title="提高内存使用效率"></a>提高内存使用效率</h4><p>使用虚拟地址后，操作系统会更多地介入到内存管理工作中，这使得控制内存权限成为可能。例如，我们希望保存数据的内存没有执行权限，保存代码的内存没有修改权限，操作系统占用的内存普通程序没有读取权限等。</p><p>另外，当物理内存不足时，操作系统能够更加灵活地控制换入换出的粒度，磁盘 I/O 是非常耗时的工作，这能够从很大程度上提高程序性能。</p><h4 id="中间层思想"><a href="#中间层思想" class="headerlink" title="中间层思想"></a>中间层思想</h4><p>在计算机中，为了让操作更加直观、易于理解、增强用户体验，开发者经常会使用一件法宝——增加中间层，即使用一种间接的方式来屏蔽复杂的底层细节，只给用户提供简单的接口。虚拟地址是使用中间层的一个典型例子。</p><p>实际上，计算机的整个发展过程就是不断引入新的中间层：<br>•计算机的早期，程序都是直接运行在硬件之上，自己负责硬件的管理工作；程序员也使用二进制进行编程，需要处理各种边界条件和安全问题。<br>•后来人们不能忍受了，于是开发出操作系统，让它来管理各种硬件，同时发明了汇编语言，减轻程序员的负担。<br>•随着软件规模的不断增大，使用汇编语言编程开始变得捉襟见肘，不仅学习成本高，开发效率也很低，于是C语言诞生了。C语言编译器先将C代码翻译为汇编代码，再由汇编器将汇编代码翻译成机器指令。<br>•随着计算机的发展，硬件越来越强大，软件越来越复杂，人们又不满足于使用C语言了，于是 C++、Java、C#、PHP 等现代化的编程语言诞生了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;虚拟地址&quot;&gt;&lt;a href=&quot;#虚拟地址&quot; class=&quot;headerlink&quot; title=&quot;虚拟地址&quot;&gt;&lt;/a&gt;虚拟地址&lt;/h4&gt;&lt;p&gt;虚拟地址的整个想法是这样的：把程序给出的地址看做是一种虚拟地址（Virtual Address），然后通过某些映射的方法，将这个虚拟地址转换成实际的物理地址。这样，只要我们能够妥善地控制这个虚拟地址到物理地址的映射过程，就可以保证程序每次运行时都可以使用相同的地址。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>程序内存区域分配的五个段</title>
    <link href="http://tingyuxuan.com/2019/11/04/%E7%A8%8B%E5%BA%8F%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%88%86%E9%85%8D%E7%9A%84%E4%BA%94%E4%B8%AA%E6%AE%B5/"/>
    <id>http://tingyuxuan.com/2019/11/04/程序内存区域分配的五个段/</id>
    <published>2019-11-03T23:59:21.000Z</published>
    <updated>2019-11-03T23:59:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h4><p>在学习之前我们先看看ELF文件。<br><a id="more"></a></p><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106075719.png" alt></p><center><font face="楷体" size="4">图1 ELF文件格式图</font></center><h4 id="ELF分为三种类型"><a href="#ELF分为三种类型" class="headerlink" title="ELF分为三种类型"></a>ELF分为三种类型</h4><p>.o可重定位文件(relocalble file)，可执行文件以及共享库(shared library)，三种格式基本上从结构上是一样的，只是具体到每一个结构不同。下面我们就从整体上看看这3种格式从文件内容上存储的方式，spec上有张图是比较经典的：如上图：其实从文件存储的格式来说，上面的两种view实际上是一样的，Segment实际上就是由section组成的，将相应的一些section映射到一起就叫segment了,就是说segment是由0个或多个section组成的，实际上本质都是section。在这里我们首先来仔细了解一下section和segment的概念：</p><p>section就是相同或者相似信息的集合，比如我们比较熟悉的.text.data.bss section，.text是可执行指令的集合，.data是初始化后数据的集合，.bss是未初始化数据的集合。实际上我们也可以将一个程序的所有内容都放在一起，就像dos一样，但是将可执行程序分成多个section是很有好处的，比如说我们可以将.text section放在memory的只读空间内，将可变的.data section放在memory的可写空间内。</p><p>从可执行文件的角度来讲，如果一个数据未被初始化那就不需要为其分配空间，所以.data和.bss一个重要的区别就是.bss并不占用可执行文件的大小，它只是记载需要多少空间来存储这些未初始化数据，而不分配实际的空间。</p><p>可以通过命令 $ readelf -l a.out 查看文件的格式和组成。</p><h4 id="不同视角下的程序"><a href="#不同视角下的程序" class="headerlink" title="不同视角下的程序"></a>不同视角下的程序</h4><p>站在汇编语言的角度，一个程序分为：<br>数据段 — DS<br>堆栈段 — SS<br>代码段 — CS<br>扩展段 – ES</p><p>站在高级语言的角度，根据APUE，一个程序分为如下段：<br>text – 代码段<br>data (initialized) – 初始化数据段<br>bss – 未初始化数据段<br>stack – 栈区<br>heap – 堆区</p><p>1.一般情况下，一个可执行二进制程序(更确切的说，在Linux操作系统下为一个进程单元，在UC/OSII中被称为任务)在存储(没有调入到内存运行)时拥有3个部分，分别是代码段(text)、数据段(data)和BSS段。这3个部分一起组成了该可执行程序的文件。</p><center><font face="楷体" size="4">可执行二进制程序 = 代码段(text)＋数据段(data)+BSS段</font></center><p>2.而当程序被加载到内存单元时，则需要另外两个域：堆域和栈域。图1-1所示为可执行代码存储态和运行态的结构对照图。一个正在运行的C程序占用的内存区域分为代码段、初始化数据段、未初始化数据段(BSS)、堆、栈5个部分。</p><center><font face="楷体" size="4">正在运行的C程序 = 代码段+初始化数据段(data)+未初始化数据段(BSS)+堆+栈</font></center><p>3.在将应用程序加载到内存空间执行时，操作系统负责代码段、数据段和BSS段的加载，并将在内存中为这些段分配空间。栈亦由操作系统分配和管理，而不需要程序员显示地管理；堆段由程序员自己管理，即显示地申请和释放空间。</p><p>4.动态分配与静态分配，二者最大的区别在于:</p><font face="楷体" size="4" color="blue">1.直到Run-Time的时候，执行动态分配，而在compile-time的时候，就已经决定好了分配多少Text+Data+BSS+Stack。</font><font face="楷体" size="4" color="red">2.通过malloc()动态分配的内存，需要程序员手工调用free()释放内存，否则容易导致内存泄露，而静态分配的内存则在进程执行结束后系统释放(Text, Data), 但Stack段中的数据很短暂，函数退出立即被销毁。</font><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106081413.png" alt></p><center><font face="楷体" size="4">图2 执行文件与地址空间</font></center><p>图2 从可执行文件a.out的角度来讲，如果一个数据未被初始化那就不需要为其分配空间，所以.data和.bss一个重要的区别就是.bss并不占用可执行文件的大小，它只是记载需要多少空间来存储这些未初始化数据，而不分配实际的空间。</p><h4 id="不同数据段的详解"><a href="#不同数据段的详解" class="headerlink" title="不同数据段的详解"></a>不同数据段的详解</h4><p>代码段 —text（code segment/text segment）<br>text段在内存中被映射为<strong>只读</strong>，但.data和.bss是<strong>可写</strong>的。<br>text段是程序代码段，在AT91库中是表示程序段的大小，它是由编译器在编译连接时自动计算的，当你在链接定位文件中将该符号放置在代码段后，那么该符号表示的值就是代码段大小，编译连接时，该符号所代表的值会自动代入到源程序中。</p><p>数据段 — data<br>data包含静态初始化的数据，所以有初值的全局变量和static变量在data区。段的起始位置也是由连接定位文件所确定，大小在编译连接时自动分配，它和你的程序大小没有关系，但和程序使用到的全局变量，常量数量相关。数据段属于静态内存分配。 </p><p>bss段—bss<br>bss是英文Block Started by Symbol的简称，通常是指用来存放程序中未初始化的全局变量的一块内存区域，在程序载入时由内核清0。BSS段属于静态内存分配。它的初始值也是由用户自己定义的连接定位文件所确定，用户应该将它定义在可读写的RAM区内，源程序中使用malloc分配的内存就是这一块，它不是根据data大小确定，主要由程序中同时分配内存最大值所确定，不过如果超出了范围，也就是分配失败，可以等空间释放之后再分配。BSS段属于静态内存分配。</p><p>stack：<br>栈(stack)保存函数的局部变量（但不包括static声明的变量， static 意味着 在数据段中 存放变量），参数以及返回值。是一种“后进先出”（Last In First Out，LIFO）的数据结构，这意味着最后放到栈上的数据，将会是第一个从栈上移走的数据。对于哪些暂时存贮的信息，和不需要长时间保存的信息来说，LIFO这种数据结构非常理想。在调用函数或过程后，系统通常会清除栈上保存的局部变量、函数调用信息及其它的信息。栈另外一个重要的特征是，它的地址空间“向下减少”，即当栈上保存的数据越多，栈的地址就越低。栈（stack）的顶部在可读写的RAM区的最后。</p><p>heap:<br>堆(heap)保存函数内部动态分配内存，是另外一种用来保存程序信息的数据结构，更准确的说是保存程序的动态变量。堆是“先进先出”（First In first Out，FIFO）数据结构。它只允许在堆的一端插入数据，在另一端移走数据。堆的地址空间“向上增加”，即当堆上保存的数据越多，堆的地址就越高。</p><center><font face="楷体" size="4">表1 五段总结</font></center><div class="table-container"><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>代码段</td><td>可执行代码，字符串常量</td></tr><tr><td>数据段</td><td>已初始化全局变量，已初始化、局部静态变量、常量数据</td></tr><tr><td>BSS段</td><td>未初始化全局变量，未初始化全局静态变量</td></tr><tr><td>栈段</td><td>局部变量、函数参数</td></tr><tr><td>堆段</td><td>动态内存分配</td></tr></tbody></table></div><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106082822.png" alt></p><center><font face="楷体" size="4">图3 APUE中的一个典型C内存空间分布图</font></center><p>所以可以知道：传入的参数,局部变量,都是在栈顶分布,随着子函数的增多而向下增长.<br>函数的调用地址(函数运行代码),全局变量,静态变量都是在分配内存的低部存在,而malloc分配的堆则存在于这些内存之上,并向上生长.</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g_A = <span class="number">10</span>;  <span class="comment">//代码段</span></span><br><span class="line"><span class="keyword">int</span> g_B = <span class="number">20</span>;        <span class="comment">//数据段</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_C = <span class="number">30</span>; <span class="comment">//数据段</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> g_D;      <span class="comment">//BSS段</span></span><br><span class="line"><span class="keyword">int</span> g_E;             <span class="comment">//BSS段</span></span><br><span class="line"><span class="keyword">char</span> *p1;            <span class="comment">//BSS段</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> local_A;            <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">int</span> local_B;            <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_C = <span class="number">0</span>; <span class="comment">//数据段</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_D;     <span class="comment">//数据段</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>; <span class="comment">//123456在代码段，p3在栈上</span></span><br><span class="line"></span><br><span class="line">    p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">//堆，分配得来得10字节的区域在堆区</span></span><br><span class="line">    <span class="built_in">strcpy</span>(p1, <span class="string">"123456"</span>); <span class="comment">//123456&#123;post.content&#125;放在常量区，编译器可能会将它与p3所指向 的"123456"优化成一块</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hight address\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------栈--------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈, 局部变量, local_A, addr:0x%08x\n"</span>, &amp;local_A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈, 局部变量,(后进栈地址相对local_A低)  local_B, addr:0x%08x\n"</span>, &amp;local_B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------------堆--------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"堆, malloc分配内存,  p1,  addr:0x%08x\n"</span>, p1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"------------BSS段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 全局变量,       未初始化    g_E,     addr:0x%08x\n"</span>, &amp;g_E, g_E);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态全局变量,   未初始化,   g_D,     addr:0x%08x\n"</span>, &amp;g_D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态局部变量,   初始化,     local_C, addr:0x%08x\n"</span>, &amp;local_C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"BSS段, 静态局部变量,   未初始化,   local_D, addr:0x%08x\n"</span>, &amp;local_D);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------数据段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"数据段,全局变量,       初始化      g_B,     addr:0x%08x\n"</span>, &amp;g_B);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"数据段,静态全局变量,   初始化,     g_C,     addr:0x%08x\n"</span>, &amp;g_C);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------代码段------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"代码段,全局初始化变量, 只读const,  g_A,     addr:0x%08x\n\n"</span>, &amp;g_A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"low address\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hight address</span><br><span class="line"></span><br><span class="line">-------------栈--------------</span><br><span class="line">栈,    局部变量,                             local_A, addr:<span class="number">0xffa70c1c</span></span><br><span class="line">栈,    局部变量,(后进栈地址相对local_A低)     local_B, addr:<span class="number">0xffa70c18</span></span><br><span class="line">-------------堆--------------</span><br><span class="line">堆,    <span class="built_in">malloc</span>分配内存,             p1,      addr:<span class="number">0x087fe008</span></span><br><span class="line">------------BSS段------------</span><br><span class="line">BSS段, 全局变量,       未初始化    g_E,     addr:<span class="number">0x08049a64</span></span><br><span class="line">BSS段, 静态全局变量,   未初始化,   g_D,     addr:<span class="number">0x08049a5c</span></span><br><span class="line">BSS段, 静态局部变量,   初始化,     local_C, addr:<span class="number">0x08049a58</span></span><br><span class="line">BSS段, 静态局部变量,   未初始化,   local_D, addr:<span class="number">0x08049a54</span></span><br><span class="line">-----------数据段------------</span><br><span class="line">数据段,全局变量,       初始化      g_B,     addr:<span class="number">0x08049a44</span></span><br><span class="line">数据段,静态全局变量,   初始化,     g_C,     addr:<span class="number">0x08049a48</span></span><br><span class="line">-----------代码段------------</span><br><span class="line">代码段,全局初始化变量, 只读<span class="keyword">const</span>,  g_A,     addr:<span class="number">0x08048620</span></span><br><span class="line"></span><br><span class="line">low address</span><br></pre></td></tr></table></figure></p><p><strong>++注意：++</strong><br>编译时需要-g选项，这样才可以看elf信息；<br>readelf -a a.out<br>查看这个执行文件的elf信息，摘录部分如下：重点注意其中data段，text段还要有bss段的地址，然后比较这个地址和上面的运行结果，是否是在elf文件的各个段的地址之内。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ <span class="number">0</span>]                   <span class="literal">NULL</span>            <span class="number">00000000</span> <span class="number">000000</span> <span class="number">000000</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">  [ <span class="number">1</span>] .interp           PROGBITS        <span class="number">08048114</span> <span class="number">000114</span> <span class="number">000013</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [ <span class="number">2</span>] .note.ABI-tag     NOTE            <span class="number">08048128</span> <span class="number">000128</span> <span class="number">000020</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">3</span>] .gnu.hash         GNU_HASH        <span class="number">08048148</span> <span class="number">000148</span> <span class="number">000020</span> <span class="number">04</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">4</span>] .dynsym           DYNSYM          <span class="number">08048168</span> <span class="number">000168</span> <span class="number">000070</span> <span class="number">10</span>   A  <span class="number">5</span>   <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">5</span>] .dynstr           STRTAB          <span class="number">080481</span>d8 <span class="number">0001</span>d8 <span class="number">000058</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [ <span class="number">6</span>] .gnu.version      VERSYM          <span class="number">08048230</span> <span class="number">000230</span> <span class="number">00000</span>e <span class="number">02</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">2</span></span><br><span class="line">  [ <span class="number">7</span>] .gnu.version_r    VERNEED         <span class="number">08048240</span> <span class="number">000240</span> <span class="number">000020</span> <span class="number">00</span>   A  <span class="number">5</span>   <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">8</span>] .rel.dyn          REL             <span class="number">08048260</span> <span class="number">000260</span> <span class="number">000008</span> <span class="number">08</span>   A  <span class="number">4</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [ <span class="number">9</span>] .rel.plt          REL             <span class="number">08048268</span> <span class="number">000268</span> <span class="number">000028</span> <span class="number">08</span>   A  <span class="number">4</span>  <span class="number">11</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">10</span>] .init             PROGBITS        <span class="number">08048290</span> <span class="number">000290</span> <span class="number">000017</span> <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">11</span>] .plt              PROGBITS        <span class="number">080482</span>a8 <span class="number">0002</span>a8 <span class="number">000060</span> <span class="number">04</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">12</span>] .text             PROGBITS        <span class="number">08048310</span> <span class="number">000310</span> <span class="number">0002e8</span> <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span> <span class="number">16</span></span><br><span class="line">  [<span class="number">13</span>] .fini             PROGBITS        <span class="number">080485f</span>8 <span class="number">0005f</span>8 <span class="number">00001</span>c <span class="number">00</span>  AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">14</span>] .rodata           PROGBITS        <span class="number">08048614</span> <span class="number">000614</span> <span class="number">000326</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">15</span>] .eh_frame         PROGBITS        <span class="number">0804893</span>c <span class="number">00093</span>c <span class="number">000004</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">16</span>] .ctors            PROGBITS        <span class="number">08049940</span> <span class="number">000940</span> <span class="number">000008</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">17</span>] .dtors            PROGBITS        <span class="number">08049948</span> <span class="number">000948</span> <span class="number">000008</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">18</span>] .jcr              PROGBITS        <span class="number">08049950</span> <span class="number">000950</span> <span class="number">000004</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">19</span>] .dynamic          DYNAMIC         <span class="number">08049954</span> <span class="number">000954</span> <span class="number">0000</span>c8 <span class="number">08</span>  WA  <span class="number">5</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">20</span>] .got              PROGBITS        <span class="number">08049</span>a1c <span class="number">000</span>a1c <span class="number">000004</span> <span class="number">04</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">21</span>] .got.plt          PROGBITS        <span class="number">08049</span>a20 <span class="number">000</span>a20 <span class="number">000020</span> <span class="number">04</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">22</span>] .data             PROGBITS        <span class="number">08049</span>a40 <span class="number">000</span>a40 <span class="number">00000</span>c <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">23</span>] .bss              NOBITS          <span class="number">08049</span>a4c <span class="number">000</span>a4c <span class="number">00001</span>c <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">24</span>] .comment          PROGBITS        <span class="number">00000000</span> <span class="number">000</span>a4c <span class="number">000114</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">25</span>] .debug_aranges    PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>60 <span class="number">000020</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">26</span>] .debug_pubnames   PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>80 <span class="number">00003</span>a <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">27</span>] .debug_info       PROGBITS        <span class="number">00000000</span> <span class="number">000b</span>ba <span class="number">0001f</span>4 <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">28</span>] .debug_abbrev     PROGBITS        <span class="number">00000000</span> <span class="number">000</span>dae <span class="number">00006f</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">29</span>] .debug_line       PROGBITS        <span class="number">00000000</span> <span class="number">000e1</span>d <span class="number">000058</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">30</span>] .debug_frame      PROGBITS        <span class="number">00000000</span> <span class="number">000e78</span> <span class="number">00003</span>c <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">31</span>] .debug_str        PROGBITS        <span class="number">00000000</span> <span class="number">000</span>eb4 <span class="number">00000</span>d <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">32</span>] .debug_loc        PROGBITS        <span class="number">00000000</span> <span class="number">000</span>ec1 <span class="number">000043</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">33</span>] .shstrtab         STRTAB          <span class="number">00000000</span> <span class="number">000f</span>04 <span class="number">000143</span> <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">  [<span class="number">34</span>] .symtab           SYMTAB          <span class="number">00000000</span> <span class="number">0015e8</span> <span class="number">000560</span> <span class="number">10</span>     <span class="number">35</span>  <span class="number">60</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">35</span>] .strtab           STRTAB          <span class="number">00000000</span> <span class="number">001b</span>48 <span class="number">0002</span>ad <span class="number">00</span>      <span class="number">0</span>   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure></p><p>★注意静态变量初始化为零和全局静态变量初始化为零的情况，都是存储在bss段★<br>从上面的elf文件可以看出，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">23</span>] .bss  NOBITS    <span class="number">08049</span>a4c <span class="number">000</span>a4c <span class="number">00001</span>c <span class="number">00</span>    WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">[<span class="number">22</span>] .data PROGBITS   <span class="number">08049</span>a40000a40 <span class="number">00000</span>c <span class="number">00</span>     WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">[<span class="number">12</span>] .text PROGBITS   <span class="number">08048310000310</span> <span class="number">0002e8</span> <span class="number">00</span>     AX  <span class="number">0</span>   <span class="number">0</span>  <span class="number">16</span></span><br><span class="line">但是在结果中显示：BSS段, 静态局部变量,初始化,  local_C, addr:<span class="number">0x08049a58</span></span><br></pre></td></tr></table></figure><br>0x08049a58 大于0x08049a4c 属于bss段是初始化的静态局部变量但是却属于bss段，为什么？<br>原因是：local_C是局部静态变量但是却初始化为零。这和没有初始化，默认是零的情况一样，都存储在bss段，如果初始化为其他的值，那么local_C这个变量就会存储在data段。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>可执行文件大小由什么决定？可执行文件在存储时分为代码段、数据段和BSS段三个部分。<br>程序1:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ar[<span class="number">30000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序2:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ar[<span class="number">300000</span>] =  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现程序2编译之后所得的.exe文件比程序1的要大得多。当下甚为不解，于是手工编译了一下，并使用了/FAs编译选项来查看了一下其各自的.asm，发现在程序1.asm中ar的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_BSS SEGMENT</span><br><span class="line">     ?ar@@<span class="number">3</span>PAHA DD <span class="number">0493e0</span><span class="function">H <span class="title">DUP</span> <span class="params">(?)</span>    </span>; ar</span><br><span class="line">_BSS ENDS</span><br></pre></td></tr></table></figure></p><p>而在程序2.asm中，ar被定义为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_DATA SEGMENT</span><br><span class="line">     ?ar@@<span class="number">3</span>PAHA DD <span class="number">01</span>H     ; ar</span><br><span class="line">                DD <span class="number">02</span>H</span><br><span class="line">                DD <span class="number">03</span>H</span><br><span class="line">                ORG $+<span class="number">1199988</span></span><br><span class="line">_DATA ENDS</span><br></pre></td></tr></table></figure><br>区别很明显，一个位于.bss段，而另一个位于.data段，两者的区别在于：全局的未初始化变量存在于.bss段中，具体体现为一个占位符；全局的已初始化变量存于.data段中；而函数内的自动变量都在栈上分配空间。</p><p>.bss是不占用.exe文件空间的，其内容由操作系统初始化（清零）；而.data却需要占用，其内容由程序初始化，因此造成了上述情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ELF文件&quot;&gt;&lt;a href=&quot;#ELF文件&quot; class=&quot;headerlink&quot; title=&quot;ELF文件&quot;&gt;&lt;/a&gt;ELF文件&lt;/h4&gt;&lt;p&gt;在学习之前我们先看看ELF文件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="http://tingyuxuan.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="计算机组成原理" scheme="http://tingyuxuan.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一个程序在计算机中是如何运行的？</title>
    <link href="http://tingyuxuan.com/2019/11/03/%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
    <id>http://tingyuxuan.com/2019/11/03/一个程序在计算机中是如何运行的？/</id>
    <published>2019-11-03T05:17:58.000Z</published>
    <updated>2019-11-03T05:17:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于CPU来说，内存仅仅是一个存放指令和数据的地方，并不能在内存中完成计算功能，例如要计算 a = b + c，必须将 a、b、c 都读取到CPU内部才能进行加法运算。为了了解具体的运算过程，我们不妨先来看一下CPU的结构。运算单元是CPU的大脑，负责加减乘除、比较、位移等运算工作，每种运算都有对应的电路支持，速度很快。<br><a id="more"></a></p><h4 id="CPU运行示意"><a href="#CPU运行示意" class="headerlink" title="CPU运行示意"></a>CPU运行示意</h4><p><center><font face="楷体" size="4">图1 CPU是一个复杂的计算机部件，它内部又包含很多小零件，如下图所示：</font></center><br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106131858.png" alt></p><p>寄存器（Register）是CPU内部非常小、非常快速的存储部件，它的容量很有限，对于32位的CPU，每个寄存器一般能存储32位（4个字节）的数据，对于64位的CPU，每个寄存器一般能存储64位（8个字节）的数据。为了完成各种复杂的功能，现代CPU都内置了几十个甚至上百个的寄存器，嵌入式系统功能单一，寄存器数量较少。</p><p>我们经常听说多少位的CPU，指的就是寄存器的的位数。现在个人电脑使用的CPU已经进入了64位时代，例如 Intel 的 Core i3、i5、i7 等。</p><p>寄存器在程序的执行过程中至关重要，不可或缺，它们可以用来完成数学运算、控制循环次数、控制程序的执行流程、标记CPU运行状态等。例如，EIP（Extern Instruction Pointer ）寄存器的值是下一条指令的地址，CPU执行完当前指令后，会根据 EIP 的值找到下一条指令，改变 EIP 的值，就会改变程序的执行流程；CR3 寄存器保存着当前进程页目录的物理地址，切换进程就会改变 CR3 的值。</p><p>那么，在CPU内部为什么又要设置缓存呢？虽然内存的读取速度已经很快了，但是和CPU比起来，还是有很大差距的，不是一个数量级的，如果每次都从内存中读取数据，会严重拖慢CPU的运行速度，CPU经常处于等待状态，无事可做。在CPU内部设置一个缓存，可以将使用频繁的数据暂时读取到缓存，需要同一地址上的数据时，就不用大老远地再去访问内存，直接从缓存中读取即可。大家在购买CPU时，也会经常关心缓存容量，例如 Intel Core i7 3770K 的三级缓存为 8MB，二级缓存为 256KB，一级缓存为 32KB。容量越大，CPU越强悍。</p><p>缓存的容量是有限的，CPU只能从缓存中读取到部分数据，对于使用不是很频繁的数据，会绕过缓存，直接到内存中读取。所以不是每次都能从缓存中得到数据，这就是缓存的命中率，能够从缓存中读取就命中，否则就没命中。关于缓存的命中率又是一门学问，哪些数据保留在缓存，哪些数据不保留，都有复杂的算法。</p><h4 id="CPU指令"><a href="#CPU指令" class="headerlink" title="CPU指令"></a>CPU指令</h4><p>要想让CPU工作，必须借助特定的指令，例如 add 用于加法运算，sub 用于除法运算，cmp 用于比较两个数的大小，这称为CPU的指令集（Instruction Set）。我们的C语言代码最终也会编译成一条一条的CPU指令。不同型号的CPU支持的指令集会有所差异，但绝大部分是相同的。</p><p>我们以C语言中的加法为例来演示CPU指令的使用。假设有下面的C语言代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0X14</span>, b = <span class="number">0XAE</span>, c;</span><br><span class="line">c = a + b;</span><br></pre></td></tr></table></figure><br>在VS2010 Debug模式下生成的CPU指令为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov  ptr[a], <span class="number">0X14</span></span><br><span class="line">mov  ptr[b], <span class="number">0XAE</span></span><br><span class="line">mov  eax, ptr[a]</span><br><span class="line">add  eax, ptr[b]</span><br><span class="line">mov  ptr[c], eax</span><br></pre></td></tr></table></figure><br>mov 和 add 都是CPU指令：<br><strong>1.</strong>mov 用来将一个数值移动到一个存储位置。这个数值可以是一个常数，也可以在内存或者寄存器上；这个存储位置可以是寄存器或者内存。<br>第一条指令中，ptr[a]表示变量 a 的地址，0X14是一个数值，mov ptr[a], 0X14表示把数值 0X14 移动到 ptr[a] 指向的内存，也就是给变量 a 赋值。第二条指令与此类似。<br>第三条指令中，eax是寄存器的名字，该寄存器常用在加法运算中，用来保存某个加数或运算结果，mov eax, ptr[a]表示把变量 a 的值移动到寄存器 eax 中。<br>第五条指令表示把寄存器eax的值移动到变量c中，此时exa中的值为 a、b相加的和。</p><p><strong>2.</strong>add 用来将两个数值相加，这两个数值可以在寄存器或者内存中，add 会将相加的结果放在第一个数所在的位置。第四条指令add  eax, ptr[b]表示把 eax 和 ptr[a] 中的数值相加，并把结果放在 eax 中。</p><p>总起来讲：第一二条指令给变量 a、b 赋值，第三四条指令完成加法运算，第五条指令将运算结果赋值给变量c。实际上，上面的代码是汇编语言，不是CPU指令，汇编语言还要经过简单的转换才能成为CPU指令；为了更加容易地说明问题，这些语句也没有严格遵守汇编的语法。有兴趣的同学可以自行学习汇编语言，这里不再展开讲解。</p><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>虚拟内存到底是什么？为什么我们在C语言中看到的地址是假的？<br>在C语言中，指针变量的值就是一个内存地址，&amp;运算符的作用也是取变量的内存地址，<br>请看下面的代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">255</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *pa = &amp;a;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"pa = %#X, &amp;b = %#X\n"</span>, pa, &amp;b);</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在 C-Free 5.0 下运行，结果为：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pa = <span class="number">0X402000</span>, &amp;b = <span class="number">0X402004</span></span><br></pre></td></tr></table></figure><br>代码中的 a、b 是全局变量，它们的内存地址在链接时就已经决定了，以后再也不能改变，该程序无论在何时运行，结果都是一样的。</p><p>那么问题来了，如果物理内存中的这两个地址被其他程序占用了怎么办，我们的程序岂不是无法运行了？</p><p>幸运的是，这些内存地址都是假的，不是真实的物理内存地址，而是虚拟地址。虚拟地址通过CPU的转换才能对应到物理地址，而且每次程序运行时，操作系统都会重新安排虚拟地址和物理地址的对应关系，哪一段物理内存空闲就使用哪一段。如下图所示：<br><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106132522.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于CPU来说，内存仅仅是一个存放指令和数据的地方，并不能在内存中完成计算功能，例如要计算 a = b + c，必须将 a、b、c 都读取到CPU内部才能进行加法运算。为了了解具体的运算过程，我们不妨先来看一下CPU的结构。运算单元是CPU的大脑，负责加减乘除、比较、位移等运算工作，每种运算都有对应的电路支持，速度很快。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>载入内存，让程序运行起来</title>
    <link href="http://tingyuxuan.com/2019/11/02/%E8%BD%BD%E5%85%A5%E5%86%85%E5%AD%98%EF%BC%8C%E8%AE%A9%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/"/>
    <id>http://tingyuxuan.com/2019/11/02/载入内存，让程序运行起来/</id>
    <published>2019-11-02T05:09:26.000Z</published>
    <updated>2019-11-02T05:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你的电脑上安装了QQ，你希望和好友聊天，会双击QQ图标，打开QQ软件，输入账号和密码，然后登录就可以了。那么，QQ是怎么运行起来的呢？<br><a id="more"></a><br>首先，有一点你要明确，你安装的QQ软件是保存在硬盘中的。<br>双击QQ图标，操作系统就会知道你要运行这个软件，它会在硬盘中找到你安装的QQ软件，将数据（安装的软件本质上就是很多数据的集合）复制到内存。对！就是复制到内存！QQ不是在硬盘中运行的，而是在内存中运行的。</p><p>为什么呢？因为内存的读写速度比硬盘快很多。<br>对于读写速度，内存 &gt; 固态硬盘 &gt; 机械硬盘。机械硬盘是靠电机带动盘片转动来读写数据的，而内存条通过电路来读写数据，电机的转速肯定没有电的传输速度（几乎是光速）快。虽然固态硬盘也是通过电路来读写数据，但是因为与内存的控制方式不一样，速度也不及内存。<br>所以，不管是运行QQ还是编辑Word文档，都是先将硬盘上的数据复制到内存，才能让CPU来处理，这个过程就叫作载入内存（Load into Memory）。完成这个过程需要一个特殊的程序（软件），这个程序就叫做加载器（Loader）。</p><p>CPU直接与内存打交道，它会读取内存中的数据进行处理，并将结果保存到内存。如果需要保存到硬盘，才会将内存中的数据复制到硬盘。</p><p>例如，打开Word文档，输入一些文字，虽然我们看到的不一样了，但是硬盘中的文档没有改变，新增的文字暂时保存到了内存，Ctrl+S才会保存到硬盘。因为内存断电后会丢失数据，所以如果你编辑完Word文档忘记保存就关机了，那么你将永远无法找回这些内容。</p><p>如果我们运行的程序较多，占用的空间就会超过内存（内存条）容量。例如计算机的内存容量为2G，却运行着10个程序，这10个程序共占用3G的空间，也就意味着需要从硬盘复制 3G 的数据到内存，这显然是不可能的。</p><p>操作系统（Operating System，简称 OS）为我们解决了这个问题：当程序运行需要的空间大于内存容量时，会将内存中暂时不用的数据再写回硬盘；需要这些数据时再从硬盘中读取，并将另外一部分不用的数据写入硬盘。这样，硬盘中就会有一部分空间用来存放内存中暂时不用的数据。这一部分空间就叫做虚拟内存（Virtual Memory）。<br>3G - 2G = 1G，上面的情况需要在硬盘上分配 1G 的虚拟内存。</p><p>硬盘的读写速度比内存慢很多，反复交换数据会消耗很多时间，所以如果你的内存太小，会严重影响计算机的运行速度，甚至会出现”卡死“现象，即使CPU强劲，也不会有大的改观。如果经济条件允许，建议将内存升级为 4G，在 win7、win8、win10 下运行软件就会比较流畅了。</p><font face="楷体" size="4">总结：CPU直接从内存中读取数据，处理完成后将结果再写入内存。</font><p><img src="https://kankan-myblog.oss-cn-shenzhen.aliyuncs.com/img/20191106131023.png" alt></p><center><font face="楷体" size="4">CPU、内存、硬盘和主板的关系。</font></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你的电脑上安装了QQ，你希望和好友聊天，会双击QQ图标，打开QQ软件，输入账号和密码，然后登录就可以了。那么，QQ是怎么运行起来的呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://tingyuxuan.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
